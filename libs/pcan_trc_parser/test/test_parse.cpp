#include "pcan_trc_parser/pcan_trc_parser.h"

#include <cassert>
#include <cstdint>
#include <string>
#include <string_view>

#include <spdlog/spdlog.h>
#include <spdlog/fmt/ranges.h>

using namespace pcan_trc_parser;

// Embed sample.trc contents directly as a string literal
static constexpr const char kSampleTrc[] =
    ";$FILEVERSION=2.0\n"
    ";$STARTTIME=45941.6917846643\n"
    ";$COLUMNS=N,O,T,I,d,l,D\n"
    ";\n"
    ";   Start time: 10/11/2025 16:36:10.195.0\n"
    ";   Generated by PCAN-View v5.3.0.942\n"
    ";   Message   Time    Type ID     Rx/Tx\n"
    ";   Number    Offset  |    [hex]  |  Data Length\n"
    ";   |         [ms]    |    |      |  |  Data [hex] ...\n"
    ";   |         |       |    |      |  |  |\n"
    ";---+-- ------+------ +- --+----- +- +- +- +- -- -- -- -- -- -- --\n"
    "      1 4294967269.343 DT     0500 Rx 8  40 00 00 00 00 00 00 00 \n"
    "      2 4294967270.343 DT     0501 Rx 8  04 00 00 00 00 00 00 00 \n"
    "      3 4294967271.344 DT     0502 Rx 8  04 00 00 00 00 00 00 00 \n"
    "      4 4294967272.341 DT     0503 Rx 8  04 04 04 04 04 00 00 00 \n"
    "      5 4294967274.337 DT     0505 Rx 8  04 13 01 55 00 00 06 B5 \n"
    "      6 4294967279.267 DT     0500 Rx 8  00 00 00 00 00 00 00 00 \n"
    "      7 4294967280.245 DT     0501 Rx 8  00 00 00 00 00 00 00 00 \n"
    "      8 4294967281.245 DT     0502 Rx 8  00 00 00 00 00 00 00 00 \n"
    "      9 4294967282.234 DT     0503 Rx 8  00 12 12 12 12 12 13 12 \n"
    "     10 4294967283.248 DT     0504 Rx 8  00 00 00 00 00 00 00 00 \n";

int main()
{
    std::size_t count = 0;
    PcanTrcFrame first{};
    PcanTrcFrame last{};
    bool first_seen = false;

    auto on_frame = [&](const PcanTrcFrame& f)
    {
        if (!first_seen) {
            first = f;
            first_seen = true;
        }
        last = f;
        ++count;

        SPDLOG_INFO("messageNumber: {}, timestamp: {}, id: {}, direction: {}, dlc: {}, payload: [{:02X}]",
            f.messageNumber,
            f.timestampMs,
            f.id,
            f.direction == direction_t::Rx ? "Rx" : "Tx",
            f.dlc,
            fmt::join(f.payload, ", ")
        );
        
        return true; // continue
    };

    // We keep the literal as a string_view, but pass the underlying C string to the API
    std::string_view sample_sv{kSampleTrc};
    const std::size_t delivered = parse_string(sample_sv.data(), on_frame);

    // Expect 10 frames parsed
    (void)delivered;
    assert(delivered == 10);
    assert(count == 10);

    // Validate first frame
    assert(first.messageNumber == 1);
    assert(first.id == 0x0500);
    assert(first.direction == direction_t::Rx);
    assert(first.dlc == 8);
    assert(first.payload.size() == 8);
    assert(first.payload[0] == 0x40);
    for (std::size_t i = 1; i < first.payload.size(); ++i)
    {
        assert(first.payload[i] == 0x00);
    }

    // Validate last frame
    assert(last.messageNumber == 10);
    assert(last.id == 0x0504);
    assert(last.direction == direction_t::Rx);
    assert(last.dlc == 8);
    for (std::uint8_t b : last.payload)
    {
        (void)b;
        assert(b == 0x00);
    }

    return 0;
}


