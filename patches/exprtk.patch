diff --git a/exprtk.hpp b/exprtk.hpp
index d53048a..a904721 100644
--- a/exprtk.hpp
+++ b/exprtk.hpp
@@ -5064,7 +5064,7 @@ namespace exprtk
 
    namespace details
    {
-      enum operator_type
+      enum class operator_type
       {
          e_default , e_null    , e_add     , e_sub     ,
          e_mul     , e_div     , e_mod     , e_pow     ,
@@ -5140,32 +5140,32 @@ namespace exprtk
       {
          switch (opr)
          {
-            case e_add    : return  "+"  ;
-            case e_sub    : return  "-"  ;
-            case e_mul    : return  "*"  ;
-            case e_div    : return  "/"  ;
-            case e_mod    : return  "%"  ;
-            case e_pow    : return  "^"  ;
-            case e_assign : return ":="  ;
-            case e_addass : return "+="  ;
-            case e_subass : return "-="  ;
-            case e_mulass : return "*="  ;
-            case e_divass : return "/="  ;
-            case e_modass : return "%="  ;
-            case e_lt     : return  "<"  ;
-            case e_lte    : return "<="  ;
-            case e_eq     : return "=="  ;
-            case e_equal  : return  "="  ;
-            case e_ne     : return "!="  ;
-            case e_nequal : return "<>"  ;
-            case e_gte    : return ">="  ;
-            case e_gt     : return  ">"  ;
-            case e_and    : return "and" ;
-            case e_or     : return "or"  ;
-            case e_xor    : return "xor" ;
-            case e_nand   : return "nand";
-            case e_nor    : return "nor" ;
-            case e_xnor   : return "xnor";
+            case operator_type::e_add    : return  "+"  ;
+            case operator_type::e_sub    : return  "-"  ;
+            case operator_type::e_mul    : return  "*"  ;
+            case operator_type::e_div    : return  "/"  ;
+            case operator_type::e_mod    : return  "%"  ;
+            case operator_type::e_pow    : return  "^"  ;
+            case operator_type::e_assign : return ":="  ;
+            case operator_type::e_addass : return "+="  ;
+            case operator_type::e_subass : return "-="  ;
+            case operator_type::e_mulass : return "*="  ;
+            case operator_type::e_divass : return "/="  ;
+            case operator_type::e_modass : return "%="  ;
+            case operator_type::e_lt     : return  "<"  ;
+            case operator_type::e_lte    : return "<="  ;
+            case operator_type::e_eq     : return "=="  ;
+            case operator_type::e_equal  : return  "="  ;
+            case operator_type::e_ne     : return "!="  ;
+            case operator_type::e_nequal : return "<>"  ;
+            case operator_type::e_gte    : return ">="  ;
+            case operator_type::e_gt     : return  ">"  ;
+            case operator_type::e_and    : return "and" ;
+            case operator_type::e_or     : return "or"  ;
+            case operator_type::e_xor    : return "xor" ;
+            case operator_type::e_nand   : return "nand";
+            case operator_type::e_nor    : return "nor" ;
+            case operator_type::e_xnor   : return "xnor";
             default       : return "N/A" ;
          }
       }
@@ -5446,46 +5446,46 @@ namespace exprtk
             {
                switch (operation)
                {
-                  case e_abs   : return numeric::abs  (arg);
-                  case e_acos  : return numeric::acos (arg);
-                  case e_acosh : return numeric::acosh(arg);
-                  case e_asin  : return numeric::asin (arg);
-                  case e_asinh : return numeric::asinh(arg);
-                  case e_atan  : return numeric::atan (arg);
-                  case e_atanh : return numeric::atanh(arg);
-                  case e_ceil  : return numeric::ceil (arg);
-                  case e_cos   : return numeric::cos  (arg);
-                  case e_cosh  : return numeric::cosh (arg);
-                  case e_exp   : return numeric::exp  (arg);
-                  case e_expm1 : return numeric::expm1(arg);
-                  case e_floor : return numeric::floor(arg);
-                  case e_log   : return numeric::log  (arg);
-                  case e_log10 : return numeric::log10(arg);
-                  case e_log2  : return numeric::log2 (arg);
-                  case e_log1p : return numeric::log1p(arg);
-                  case e_neg   : return numeric::neg  (arg);
-                  case e_pos   : return numeric::pos  (arg);
-                  case e_round : return numeric::round(arg);
-                  case e_sin   : return numeric::sin  (arg);
-                  case e_sinc  : return numeric::sinc (arg);
-                  case e_sinh  : return numeric::sinh (arg);
-                  case e_sqrt  : return numeric::sqrt (arg);
-                  case e_tan   : return numeric::tan  (arg);
-                  case e_tanh  : return numeric::tanh (arg);
-                  case e_cot   : return numeric::cot  (arg);
-                  case e_sec   : return numeric::sec  (arg);
-                  case e_csc   : return numeric::csc  (arg);
-                  case e_r2d   : return numeric::r2d  (arg);
-                  case e_d2r   : return numeric::d2r  (arg);
-                  case e_d2g   : return numeric::d2g  (arg);
-                  case e_g2d   : return numeric::g2d  (arg);
-                  case e_notl  : return numeric::notl (arg);
-                  case e_sgn   : return numeric::sgn  (arg);
-                  case e_erf   : return numeric::erf  (arg);
-                  case e_erfc  : return numeric::erfc (arg);
-                  case e_ncdf  : return numeric::ncdf (arg);
-                  case e_frac  : return numeric::frac (arg);
-                  case e_trunc : return numeric::trunc(arg);
+                  case operator_type::e_abs   : return numeric::abs  (arg);
+                  case operator_type::e_acos  : return numeric::acos (arg);
+                  case operator_type::e_acosh : return numeric::acosh(arg);
+                  case operator_type::e_asin  : return numeric::asin (arg);
+                  case operator_type::e_asinh : return numeric::asinh(arg);
+                  case operator_type::e_atan  : return numeric::atan (arg);
+                  case operator_type::e_atanh : return numeric::atanh(arg);
+                  case operator_type::e_ceil  : return numeric::ceil (arg);
+                  case operator_type::e_cos   : return numeric::cos  (arg);
+                  case operator_type::e_cosh  : return numeric::cosh (arg);
+                  case operator_type::e_exp   : return numeric::exp  (arg);
+                  case operator_type::e_expm1 : return numeric::expm1(arg);
+                  case operator_type::e_floor : return numeric::floor(arg);
+                  case operator_type::e_log   : return numeric::log  (arg);
+                  case operator_type::e_log10 : return numeric::log10(arg);
+                  case operator_type::e_log2  : return numeric::log2 (arg);
+                  case operator_type::e_log1p : return numeric::log1p(arg);
+                  case operator_type::e_neg   : return numeric::neg  (arg);
+                  case operator_type::e_pos   : return numeric::pos  (arg);
+                  case operator_type::e_round : return numeric::round(arg);
+                  case operator_type::e_sin   : return numeric::sin  (arg);
+                  case operator_type::e_sinc  : return numeric::sinc (arg);
+                  case operator_type::e_sinh  : return numeric::sinh (arg);
+                  case operator_type::e_sqrt  : return numeric::sqrt (arg);
+                  case operator_type::e_tan   : return numeric::tan  (arg);
+                  case operator_type::e_tanh  : return numeric::tanh (arg);
+                  case operator_type::e_cot   : return numeric::cot  (arg);
+                  case operator_type::e_sec   : return numeric::sec  (arg);
+                  case operator_type::e_csc   : return numeric::csc  (arg);
+                  case operator_type::e_r2d   : return numeric::r2d  (arg);
+                  case operator_type::e_d2r   : return numeric::d2r  (arg);
+                  case operator_type::e_d2g   : return numeric::d2g  (arg);
+                  case operator_type::e_g2d   : return numeric::g2d  (arg);
+                  case operator_type::e_notl  : return numeric::notl (arg);
+                  case operator_type::e_sgn   : return numeric::sgn  (arg);
+                  case operator_type::e_erf   : return numeric::erf  (arg);
+                  case operator_type::e_erfc  : return numeric::erfc (arg);
+                  case operator_type::e_ncdf  : return numeric::ncdf (arg);
+                  case operator_type::e_frac  : return numeric::frac (arg);
+                  case operator_type::e_trunc : return numeric::trunc(arg);
 
                   default      : exprtk_debug(("numeric::details::process_impl<T> - Invalid unary operation.\n"));
                                  return std::numeric_limits<T>::quiet_NaN();
@@ -5497,35 +5497,35 @@ namespace exprtk
             {
                switch (operation)
                {
-                  case e_add    : return (arg0 + arg1);
-                  case e_sub    : return (arg0 - arg1);
-                  case e_mul    : return (arg0 * arg1);
-                  case e_div    : return (arg0 / arg1);
-                  case e_mod    : return modulus<T>(arg0,arg1);
-                  case e_pow    : return pow<T>(arg0,arg1);
-                  case e_atan2  : return atan2<T>(arg0,arg1);
-                  case e_min    : return std::min<T>(arg0,arg1);
-                  case e_max    : return std::max<T>(arg0,arg1);
-                  case e_logn   : return logn<T>(arg0,arg1);
-                  case e_lt     : return (arg0 <  arg1) ? T(1) : T(0);
-                  case e_lte    : return (arg0 <= arg1) ? T(1) : T(0);
-                  case e_eq     : return std::equal_to<T>()(arg0,arg1) ? T(1) : T(0);
-                  case e_ne     : return std::not_equal_to<T>()(arg0,arg1) ? T(1) : T(0);
-                  case e_gte    : return (arg0 >= arg1) ? T(1) : T(0);
-                  case e_gt     : return (arg0 >  arg1) ? T(1) : T(0);
-                  case e_and    : return and_opr <T>(arg0,arg1);
-                  case e_nand   : return nand_opr<T>(arg0,arg1);
-                  case e_or     : return or_opr  <T>(arg0,arg1);
-                  case e_nor    : return nor_opr <T>(arg0,arg1);
-                  case e_xor    : return xor_opr <T>(arg0,arg1);
-                  case e_xnor   : return xnor_opr<T>(arg0,arg1);
-                  case e_root   : return root    <T>(arg0,arg1);
-                  case e_roundn : return roundn  <T>(arg0,arg1);
-                  case e_equal  : return equal   <T>(arg0,arg1);
-                  case e_nequal : return nequal  <T>(arg0,arg1);
-                  case e_hypot  : return hypot   <T>(arg0,arg1);
-                  case e_shr    : return shr     <T>(arg0,arg1);
-                  case e_shl    : return shl     <T>(arg0,arg1);
+                  case operator_type::e_add    : return (arg0 + arg1);
+                  case operator_type::e_sub    : return (arg0 - arg1);
+                  case operator_type::e_mul    : return (arg0 * arg1);
+                  case operator_type::e_div    : return (arg0 / arg1);
+                  case operator_type::e_mod    : return modulus<T>(arg0,arg1);
+                  case operator_type::e_pow    : return pow<T>(arg0,arg1);
+                  case operator_type::e_atan2  : return atan2<T>(arg0,arg1);
+                  case operator_type::e_min    : return std::min<T>(arg0,arg1);
+                  case operator_type::e_max    : return std::max<T>(arg0,arg1);
+                  case operator_type::e_logn   : return logn<T>(arg0,arg1);
+                  case operator_type::e_lt     : return (arg0 <  arg1) ? T(1) : T(0);
+                  case operator_type::e_lte    : return (arg0 <= arg1) ? T(1) : T(0);
+                  case operator_type::e_eq     : return std::equal_to<T>()(arg0,arg1) ? T(1) : T(0);
+                  case operator_type::e_ne     : return std::not_equal_to<T>()(arg0,arg1) ? T(1) : T(0);
+                  case operator_type::e_gte    : return (arg0 >= arg1) ? T(1) : T(0);
+                  case operator_type::e_gt     : return (arg0 >  arg1) ? T(1) : T(0);
+                  case operator_type::e_and    : return and_opr <T>(arg0,arg1);
+                  case operator_type::e_nand   : return nand_opr<T>(arg0,arg1);
+                  case operator_type::e_or     : return or_opr  <T>(arg0,arg1);
+                  case operator_type::e_nor    : return nor_opr <T>(arg0,arg1);
+                  case operator_type::e_xor    : return xor_opr <T>(arg0,arg1);
+                  case operator_type::e_xnor   : return xnor_opr<T>(arg0,arg1);
+                  case operator_type::e_root   : return root    <T>(arg0,arg1);
+                  case operator_type::e_roundn : return roundn  <T>(arg0,arg1);
+                  case operator_type::e_equal  : return equal   <T>(arg0,arg1);
+                  case operator_type::e_nequal : return nequal  <T>(arg0,arg1);
+                  case operator_type::e_hypot  : return hypot   <T>(arg0,arg1);
+                  case operator_type::e_shr    : return shr     <T>(arg0,arg1);
+                  case operator_type::e_shl    : return shl     <T>(arg0,arg1);
 
                   default       : exprtk_debug(("numeric::details::process_impl<T> - Invalid binary operation.\n"));
                                   return std::numeric_limits<T>::quiet_NaN();
@@ -5537,33 +5537,33 @@ namespace exprtk
             {
                switch (operation)
                {
-                  case e_add    : return (arg0 + arg1);
-                  case e_sub    : return (arg0 - arg1);
-                  case e_mul    : return (arg0 * arg1);
-                  case e_div    : return (arg0 / arg1);
-                  case e_mod    : return arg0 % arg1;
-                  case e_pow    : return pow<T>(arg0,arg1);
-                  case e_min    : return std::min<T>(arg0,arg1);
-                  case e_max    : return std::max<T>(arg0,arg1);
-                  case e_logn   : return logn<T>(arg0,arg1);
-                  case e_lt     : return (arg0 <  arg1) ? T(1) : T(0);
-                  case e_lte    : return (arg0 <= arg1) ? T(1) : T(0);
-                  case e_eq     : return (arg0 == arg1) ? T(1) : T(0);
-                  case e_ne     : return (arg0 != arg1) ? T(1) : T(0);
-                  case e_gte    : return (arg0 >= arg1) ? T(1) : T(0);
-                  case e_gt     : return (arg0 >  arg1) ? T(1) : T(0);
-                  case e_and    : return ((arg0 != T(0)) && (arg1 != T(0))) ? T(1) : T(0);
-                  case e_nand   : return ((arg0 != T(0)) && (arg1 != T(0))) ? T(0) : T(1);
-                  case e_or     : return ((arg0 != T(0)) || (arg1 != T(0))) ? T(1) : T(0);
-                  case e_nor    : return ((arg0 != T(0)) || (arg1 != T(0))) ? T(0) : T(1);
-                  case e_xor    : return arg0 ^ arg1;
-                  case e_xnor   : return !(arg0 ^ arg1);
-                  case e_root   : return root<T>(arg0,arg1);
-                  case e_equal  : return arg0 == arg1;
-                  case e_nequal : return arg0 != arg1;
-                  case e_hypot  : return hypot<T>(arg0,arg1);
-                  case e_shr    : return arg0 >> arg1;
-                  case e_shl    : return arg0 << arg1;
+                  case operator_type::e_add    : return (arg0 + arg1);
+                  case operator_type::e_sub    : return (arg0 - arg1);
+                  case operator_type::e_mul    : return (arg0 * arg1);
+                  case operator_type::e_div    : return (arg0 / arg1);
+                  case operator_type::e_mod    : return arg0 % arg1;
+                  case operator_type::e_pow    : return pow<T>(arg0,arg1);
+                  case operator_type::e_min    : return std::min<T>(arg0,arg1);
+                  case operator_type::e_max    : return std::max<T>(arg0,arg1);
+                  case operator_type::e_logn   : return logn<T>(arg0,arg1);
+                  case operator_type::e_lt     : return (arg0 <  arg1) ? T(1) : T(0);
+                  case operator_type::e_lte    : return (arg0 <= arg1) ? T(1) : T(0);
+                  case operator_type::e_eq     : return (arg0 == arg1) ? T(1) : T(0);
+                  case operator_type::e_ne     : return (arg0 != arg1) ? T(1) : T(0);
+                  case operator_type::e_gte    : return (arg0 >= arg1) ? T(1) : T(0);
+                  case operator_type::e_gt     : return (arg0 >  arg1) ? T(1) : T(0);
+                  case operator_type::e_and    : return ((arg0 != T(0)) && (arg1 != T(0))) ? T(1) : T(0);
+                  case operator_type::e_nand   : return ((arg0 != T(0)) && (arg1 != T(0))) ? T(0) : T(1);
+                  case operator_type::e_or     : return ((arg0 != T(0)) || (arg1 != T(0))) ? T(1) : T(0);
+                  case operator_type::e_nor    : return ((arg0 != T(0)) || (arg1 != T(0))) ? T(0) : T(1);
+                  case operator_type::e_xor    : return arg0 ^ arg1;
+                  case operator_type::e_xnor   : return !(arg0 ^ arg1);
+                  case operator_type::e_root   : return root<T>(arg0,arg1);
+                  case operator_type::e_equal  : return arg0 == arg1;
+                  case operator_type::e_nequal : return arg0 != arg1;
+                  case operator_type::e_hypot  : return hypot<T>(arg0,arg1);
+                  case operator_type::e_shr    : return arg0 >> arg1;
+                  case operator_type::e_shl    : return arg0 << arg1;
 
                   default       : exprtk_debug(("numeric::details::process_impl<IntType> - Invalid binary operation.\n"));
                                   return std::numeric_limits<T>::quiet_NaN();
@@ -5607,7 +5607,7 @@ namespace exprtk
       {
       public:
 
-         enum node_type
+         enum class node_type
          {
             e_none          , e_null          , e_constant    , e_unary        ,
             e_binary        , e_binary_ext    , e_trinary     , e_quaternary   ,
@@ -5671,7 +5671,7 @@ namespace exprtk
 
          inline virtual node_type type() const
          {
-            return e_none;
+            return node_type::e_none;
          }
 
          inline virtual bool valid() const
@@ -5725,31 +5725,31 @@ namespace exprtk
       template <typename T>
       inline bool is_literal_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_constant == node->type());
+         return node && (details::expression_node<T>::node_type::e_constant == node->type());
       }
 
       template <typename T>
       inline bool is_unary_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_unary == node->type());
+         return node && (details::expression_node<T>::node_type::e_unary == node->type());
       }
 
       template <typename T>
       inline bool is_neg_unary_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_neg == node->type());
+         return node && (details::expression_node<T>::node_type::e_neg == node->type());
       }
 
       template <typename T>
       inline bool is_binary_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_binary == node->type());
+         return node && (details::expression_node<T>::node_type::e_binary == node->type());
       }
 
       template <typename T>
       inline bool is_variable_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_variable == node->type());
+         return node && (details::expression_node<T>::node_type::e_variable == node->type());
       }
 
       template <typename T>
@@ -5757,70 +5757,70 @@ namespace exprtk
       {
          return node &&
                 (
-                  details::expression_node<T>::e_variable      == node->type() ||
-                  details::expression_node<T>::e_vecelem       == node->type() ||
-                  details::expression_node<T>::e_veccelem      == node->type() ||
-                  details::expression_node<T>::e_vecelemrtc    == node->type() ||
-                  details::expression_node<T>::e_veccelemrtc   == node->type() ||
-                  details::expression_node<T>::e_rbvecelem     == node->type() ||
-                  details::expression_node<T>::e_rbveccelem    == node->type() ||
-                  details::expression_node<T>::e_rbvecelemrtc  == node->type() ||
-                  details::expression_node<T>::e_rbveccelemrtc == node->type()
+                  details::expression_node<T>::node_type::e_variable      == node->type() ||
+                  details::expression_node<T>::node_type::e_vecelem       == node->type() ||
+                  details::expression_node<T>::node_type::e_veccelem      == node->type() ||
+                  details::expression_node<T>::node_type::e_vecelemrtc    == node->type() ||
+                  details::expression_node<T>::node_type::e_veccelemrtc   == node->type() ||
+                  details::expression_node<T>::node_type::e_rbvecelem     == node->type() ||
+                  details::expression_node<T>::node_type::e_rbveccelem    == node->type() ||
+                  details::expression_node<T>::node_type::e_rbvecelemrtc  == node->type() ||
+                  details::expression_node<T>::node_type::e_rbveccelemrtc == node->type()
                 );
       }
 
       template <typename T>
       inline bool is_vector_elem_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_vecelem == node->type());
+         return node && (details::expression_node<T>::node_type::e_vecelem == node->type());
       }
 
       template <typename T>
       inline bool is_vector_celem_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_veccelem == node->type());
+         return node && (details::expression_node<T>::node_type::e_veccelem == node->type());
       }
 
       template <typename T>
       inline bool is_vector_elem_rtc_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_vecelemrtc == node->type());
+         return node && (details::expression_node<T>::node_type::e_vecelemrtc == node->type());
       }
 
       template <typename T>
       inline bool is_vector_celem_rtc_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_veccelemrtc == node->type());
+         return node && (details::expression_node<T>::node_type::e_veccelemrtc == node->type());
       }
 
       template <typename T>
       inline bool is_rebasevector_elem_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_rbvecelem == node->type());
+         return node && (details::expression_node<T>::node_type::e_rbvecelem == node->type());
       }
 
       template <typename T>
       inline bool is_rebasevector_elem_rtc_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_rbvecelemrtc == node->type());
+         return node && (details::expression_node<T>::node_type::e_rbvecelemrtc == node->type());
       }
 
       template <typename T>
       inline bool is_rebasevector_celem_rtc_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_rbveccelemrtc == node->type());
+         return node && (details::expression_node<T>::node_type::e_rbveccelemrtc == node->type());
       }
 
       template <typename T>
       inline bool is_rebasevector_celem_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_rbveccelem == node->type());
+         return node && (details::expression_node<T>::node_type::e_rbveccelem == node->type());
       }
 
       template <typename T>
       inline bool is_vector_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_vector == node->type());
+         return node && (details::expression_node<T>::node_type::e_vector == node->type());
       }
 
       template <typename T>
@@ -5830,17 +5830,17 @@ namespace exprtk
          {
             switch (node->type())
             {
-               case details::expression_node<T>::e_vector      :
-               case details::expression_node<T>::e_vecvalass   :
-               case details::expression_node<T>::e_vecvecass   :
-               case details::expression_node<T>::e_vecopvalass :
-               case details::expression_node<T>::e_vecopvecass :
-               case details::expression_node<T>::e_vecvecswap  :
-               case details::expression_node<T>::e_vecvecarith :
-               case details::expression_node<T>::e_vecvalarith :
-               case details::expression_node<T>::e_valvecarith :
-               case details::expression_node<T>::e_vecunaryop  :
-               case details::expression_node<T>::e_vecondition : return true;
+               case details::expression_node<T>::node_type::e_vector      :
+               case details::expression_node<T>::node_type::e_vecvalass   :
+               case details::expression_node<T>::node_type::e_vecvecass   :
+               case details::expression_node<T>::node_type::e_vecopvalass :
+               case details::expression_node<T>::node_type::e_vecopvecass :
+               case details::expression_node<T>::node_type::e_vecvecswap  :
+               case details::expression_node<T>::node_type::e_vecvecarith :
+               case details::expression_node<T>::node_type::e_vecvalarith :
+               case details::expression_node<T>::node_type::e_valvecarith :
+               case details::expression_node<T>::node_type::e_vecunaryop  :
+               case details::expression_node<T>::node_type::e_vecondition : return true;
                default                                         : return false;
             }
          }
@@ -5853,51 +5853,51 @@ namespace exprtk
       {
          return node &&
          (
-           details::expression_node<T>::e_constant    == node->type() ||
-           details::expression_node<T>::e_stringconst == node->type()
+           details::expression_node<T>::node_type::e_constant    == node->type() ||
+           details::expression_node<T>::node_type::e_stringconst == node->type()
          );
       }
 
       template <typename T>
       inline bool is_null_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_null == node->type());
+         return node && (details::expression_node<T>::node_type::e_null == node->type());
       }
 
       template <typename T>
       inline bool is_break_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_break == node->type());
+         return node && (details::expression_node<T>::node_type::e_break == node->type());
       }
 
       template <typename T>
       inline bool is_continue_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_continue == node->type());
+         return node && (details::expression_node<T>::node_type::e_continue == node->type());
       }
 
       template <typename T>
       inline bool is_swap_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_swap == node->type());
+         return node && (details::expression_node<T>::node_type::e_swap == node->type());
       }
 
       template <typename T>
       inline bool is_function(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_function == node->type());
+         return node && (details::expression_node<T>::node_type::e_function == node->type());
       }
 
       template <typename T>
       inline bool is_vararg_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_vararg == node->type());
+         return node && (details::expression_node<T>::node_type::e_vararg == node->type());
       }
 
       template <typename T>
       inline bool is_return_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_return == node->type());
+         return node && (details::expression_node<T>::node_type::e_return == node->type());
       }
 
       template <typename T> class unary_node;
@@ -5907,7 +5907,7 @@ namespace exprtk
       {
          if (node && is_unary_node(node))
          {
-            return (details::e_neg == static_cast<const unary_node<T>*>(node)->operation());
+            return (details::operator_type::e_neg == static_cast<const unary_node<T>*>(node)->operation());
          }
          else
             return false;
@@ -5916,7 +5916,7 @@ namespace exprtk
       template <typename T>
       inline bool is_assert_node(const expression_node<T>* node)
       {
-         return node && (details::expression_node<T>::e_assert == node->type());
+         return node && (details::expression_node<T>::node_type::e_assert == node->type());
       }
 
       template <typename T>
@@ -6674,7 +6674,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_null;
+            return expression_node<T>::node_type::e_null;
          }
       };
 
@@ -6751,7 +6751,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_nulleq;
+            return expression_node<T>::node_type::e_nulleq;
          }
 
          inline expression_node<T>* branch(const std::size_t&) const exprtk_override
@@ -6796,7 +6796,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_constant;
+            return expression_node<T>::node_type::e_constant;
          }
 
          inline expression_node<T>* branch(const std::size_t&) const exprtk_override
@@ -6877,7 +6877,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_stringconst;
+            return expression_node<T>::node_type::e_stringconst;
          }
 
          inline expression_node<T>* branch(const std::size_t&) const exprtk_override
@@ -6943,7 +6943,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_unary;
+            return expression_node<T>::node_type::e_unary;
          }
 
          inline operator_type operation()
@@ -7011,7 +7011,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_binary;
+            return expression_node<T>::node_type::e_binary;
          }
 
          inline operator_type operation()
@@ -7071,7 +7071,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_binary_ext;
+            return expression_node<T>::node_type::e_binary_ext;
          }
 
          inline operator_type operation()
@@ -7133,11 +7133,11 @@ namespace exprtk
 
             switch (operation_)
             {
-               case e_inrange : return (arg1 < arg0) ? T(0) : ((arg1 > arg2) ? T(0) : T(1));
+               case operator_type::e_inrange : return (arg1 < arg0) ? T(0) : ((arg1 > arg2) ? T(0) : T(1));
 
-               case e_clamp   : return (arg1 < arg0) ? arg0 : (arg1 > arg2 ? arg2 : arg1);
+               case operator_type::e_clamp   : return (arg1 < arg0) ? arg0 : (arg1 > arg2 ? arg2 : arg1);
 
-               case e_iclamp  : if ((arg1 <= arg0) || (arg1 >= arg2))
+               case operator_type::e_iclamp  : if ((arg1 <= arg0) || (arg1 >= arg2))
                                    return arg1;
                                 else
                                    return ((T(2) * arg1  <= (arg2 + arg0)) ? arg0 : arg2);
@@ -7149,7 +7149,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_trinary;
+            return expression_node<T>::node_type::e_trinary;
          }
 
          inline bool valid() const exprtk_override
@@ -7201,7 +7201,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_quaternary;
+            return expression_node<T>::node_type::e_quaternary;
          }
 
          void collect_nodes(typename expression_node<T>::noderef_list_t& node_delete_list) exprtk_override
@@ -7257,7 +7257,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_conditional;
+            return expression_node<T>::node_type::e_conditional;
          }
 
          inline bool valid() const exprtk_override
@@ -7315,7 +7315,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_conditional;
+            return expression_node<T>::node_type::e_conditional;
          }
 
          inline bool valid() const exprtk_override
@@ -7386,7 +7386,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_break;
+            return expression_node<T>::node_type::e_break;
          }
 
          void collect_nodes(typename expression_node<T>::noderef_list_t& node_delete_list) exprtk_override
@@ -7419,7 +7419,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_break;
+            return expression_node<T>::node_type::e_break;
          }
       };
       #endif
@@ -7503,7 +7503,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_while;
+            return expression_node<T>::node_type::e_while;
          }
 
          inline bool valid() const exprtk_override
@@ -7604,7 +7604,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_repeat;
+            return expression_node<T>::node_type::e_repeat;
          }
 
          inline bool valid() const exprtk_override
@@ -7722,7 +7722,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_for;
+            return expression_node<T>::node_type::e_for;
          }
 
          inline bool valid() const exprtk_override
@@ -8183,7 +8183,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override exprtk_final
          {
-            return expression_node<T>::e_switch;
+            return expression_node<T>::node_type::e_switch;
          }
 
          inline bool valid() const exprtk_override
@@ -8280,7 +8280,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_mswitch;
+            return expression_node<T>::node_type::e_mswitch;
          }
 
          inline bool valid() const exprtk_override
@@ -8354,7 +8354,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_variable;
+            return expression_node<T>::node_type::e_variable;
          }
 
       private:
@@ -8609,7 +8609,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vector;
+            return expression_node<T>::node_type::e_vector;
          }
 
          inline bool valid() const exprtk_override
@@ -8679,7 +8679,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecsize;
+            return expression_node<T>::node_type::e_vecsize;
          }
 
          inline bool valid() const exprtk_override
@@ -8737,7 +8737,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecelem;
+            return expression_node<T>::node_type::e_vecelem;
          }
 
          inline bool valid() const exprtk_override
@@ -8821,7 +8821,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_veccelem;
+            return expression_node<T>::node_type::e_veccelem;
          }
 
          inline bool valid() const exprtk_override
@@ -8904,7 +8904,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecelemrtc;
+            return expression_node<T>::node_type::e_vecelemrtc;
          }
 
          inline bool valid() const exprtk_override
@@ -9010,7 +9010,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_veccelemrtc;
+            return expression_node<T>::node_type::e_veccelemrtc;
          }
 
          inline bool valid() const exprtk_override
@@ -9108,7 +9108,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_rbvecelem;
+            return expression_node<T>::node_type::e_rbvecelem;
          }
 
          inline bool valid() const exprtk_override
@@ -9191,7 +9191,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_rbveccelem;
+            return expression_node<T>::node_type::e_rbveccelem;
          }
 
          inline bool valid() const exprtk_override
@@ -9265,7 +9265,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_rbvecelemrtc;
+            return expression_node<T>::node_type::e_rbvecelemrtc;
          }
 
          inline bool valid() const exprtk_override
@@ -9368,7 +9368,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_rbveccelemrtc;
+            return expression_node<T>::node_type::e_rbveccelemrtc;
          }
 
          inline bool valid() const exprtk_override
@@ -9515,7 +9515,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecinit;
+            return expression_node<T>::node_type::e_vecinit;
          }
 
          inline bool valid() const exprtk_override
@@ -9570,7 +9570,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecinit;
+            return expression_node<T>::node_type::e_vecinit;
          }
 
          inline bool valid() const exprtk_override
@@ -9628,7 +9628,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecinit;
+            return expression_node<T>::node_type::e_vecinit;
          }
 
          inline bool valid() const exprtk_override
@@ -9691,7 +9691,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecinit;
+            return expression_node<T>::node_type::e_vecinit;
          }
 
          inline bool valid() const exprtk_override
@@ -9755,7 +9755,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecinit;
+            return expression_node<T>::node_type::e_vecinit;
          }
 
          inline bool valid() const exprtk_override
@@ -9821,7 +9821,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecinit;
+            return expression_node<T>::node_type::e_vecinit;
          }
 
          inline bool valid() const exprtk_override
@@ -9885,7 +9885,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecinit;
+            return expression_node<T>::node_type::e_vecinit;
          }
 
          inline bool valid() const exprtk_override
@@ -9948,7 +9948,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecinit;
+            return expression_node<T>::node_type::e_vecinit;
          }
 
          inline bool valid() const exprtk_override
@@ -10000,7 +10000,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_swap;
+            return expression_node<T>::node_type::e_swap;
          }
 
       private:
@@ -10018,7 +10018,7 @@ namespace exprtk
          typedef ivariable<T>*       ivariable_ptr;
 
          swap_generic_node(expression_ptr var0, expression_ptr var1)
-         : binary_node<T>(details::e_swap, var0, var1)
+         : binary_node<T>(details::operator_type::e_swap, var0, var1)
          , var0_(dynamic_cast<ivariable_ptr>(var0))
          , var1_(dynamic_cast<ivariable_ptr>(var1))
          {}
@@ -10031,7 +10031,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_swap;
+            return expression_node<T>::node_type::e_swap;
          }
 
       private:
@@ -10055,7 +10055,7 @@ namespace exprtk
 
          swap_vecvec_node(expression_ptr branch0,
                           expression_ptr branch1)
-         : binary_node<T>(details::e_swap, branch0, branch1)
+         : binary_node<T>(details::operator_type::e_swap, branch0, branch1)
          , vec0_node_ptr_(0)
          , vec1_node_ptr_(0)
          , initialised_  (false)
@@ -10120,7 +10120,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecvecswap;
+            return expression_node<T>::node_type::e_vecvecswap;
          }
 
          inline bool valid() const exprtk_override
@@ -10236,7 +10236,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_stringvar;
+            return expression_node<T>::node_type::e_stringvar;
          }
 
          void rebase(std::string& s)
@@ -10331,7 +10331,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_stringvarrng;
+            return expression_node<T>::node_type::e_stringvarrng;
          }
 
       private:
@@ -10400,7 +10400,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_cstringvarrng;
+            return expression_node<T>::node_type::e_cstringvarrng;
          }
 
       private:
@@ -10521,7 +10521,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_strgenrange;
+            return expression_node<T>::node_type::e_strgenrange;
          }
 
          inline bool valid() const exprtk_override
@@ -10676,7 +10676,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_strconcat;
+            return expression_node<T>::node_type::e_strconcat;
          }
 
          inline bool valid() const exprtk_override
@@ -10714,7 +10714,7 @@ namespace exprtk
          using binary_node<T>::branch;
 
          swap_string_node(expression_ptr branch0, expression_ptr branch1)
-         : binary_node<T>(details::e_swap, branch0, branch1)
+         : binary_node<T>(details::operator_type::e_swap, branch0, branch1)
          , initialised_(false)
          , str0_node_ptr_(0)
          , str1_node_ptr_(0)
@@ -10770,7 +10770,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_strswap;
+            return expression_node<T>::node_type::e_strswap;
          }
 
          inline bool valid() const exprtk_override
@@ -10801,7 +10801,7 @@ namespace exprtk
 
          swap_genstrings_node(expression_ptr branch0,
                               expression_ptr branch1)
-         : binary_node<T>(details::e_default, branch0, branch1)
+         : binary_node<T>(details::operator_type::e_default, branch0, branch1)
          , str0_base_ptr_ (0)
          , str1_base_ptr_ (0)
          , str0_range_ptr_(0)
@@ -10925,7 +10925,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_strswap;
+            return expression_node<T>::node_type::e_strswap;
          }
 
          inline bool valid() const exprtk_override
@@ -10967,7 +10967,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_stringvarsize;
+            return expression_node<T>::node_type::e_stringvarsize;
          }
 
       private:
@@ -11008,7 +11008,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_stringsize;
+            return expression_node<T>::node_type::e_stringsize;
          }
 
          inline bool valid() const exprtk_override
@@ -11149,7 +11149,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_strass;
+            return expression_node<T>::node_type::e_strass;
          }
 
          inline bool valid() const exprtk_override
@@ -11289,7 +11289,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_strass;
+            return expression_node<T>::node_type::e_strass;
          }
 
          inline bool valid() const exprtk_override
@@ -11325,7 +11325,7 @@ namespace exprtk
          conditional_string_node(expression_ptr condition,
                                  expression_ptr consequent,
                                  expression_ptr alternative)
-         : trinary_node<T>(details::e_default, consequent, alternative, condition)
+         : trinary_node<T>(details::operator_type::e_default, consequent, alternative, condition)
          , initialised_(false)
          , str0_base_ptr_ (0)
          , str1_base_ptr_ (0)
@@ -11447,7 +11447,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_strcondition;
+            return expression_node<T>::node_type::e_strcondition;
          }
 
          inline bool valid() const exprtk_override
@@ -11493,7 +11493,7 @@ namespace exprtk
 
          cons_conditional_str_node(expression_ptr condition,
                                    expression_ptr consequent)
-         : binary_node<T>(details::e_default, consequent, condition)
+         : binary_node<T>(details::operator_type::e_default, consequent, condition)
          , initialised_(false)
          , str0_base_ptr_ (0)
          , str0_range_ptr_(0)
@@ -11577,7 +11577,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_strccondition;
+            return expression_node<T>::node_type::e_strccondition;
          }
 
          inline bool valid() const exprtk_override
@@ -11705,7 +11705,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_stringvararg;
+            return expression_node<T>::node_type::e_stringvararg;
          }
 
          inline bool valid() const exprtk_override
@@ -11794,7 +11794,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_assert;
+            return expression_node<T>::node_type::e_assert;
          }
 
          inline bool valid() const exprtk_override
@@ -12130,7 +12130,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_trinary;
+            return expression_node<T>::node_type::e_trinary;
          }
 
       private:
@@ -12164,7 +12164,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_trinary;
+            return expression_node<T>::node_type::e_trinary;
          }
 
       private:
@@ -12217,7 +12217,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vararg;
+            return expression_node<T>::node_type::e_vararg;
          }
 
          inline bool valid() const exprtk_override
@@ -12290,7 +12290,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vararg;
+            return expression_node<T>::node_type::e_vararg;
          }
 
          inline bool valid() const exprtk_override
@@ -12331,7 +12331,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecfunc;
+            return expression_node<T>::node_type::e_vecfunc;
          }
 
          inline bool valid() const exprtk_override
@@ -12685,7 +12685,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecvalass;
+            return expression_node<T>::node_type::e_vecvalass;
          }
 
          inline bool valid() const exprtk_override
@@ -12852,7 +12852,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecvecass;
+            return expression_node<T>::node_type::e_vecvecass;
          }
 
          inline bool valid() const exprtk_override
@@ -13305,7 +13305,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecopvalass;
+            return expression_node<T>::node_type::e_vecopvalass;
          }
 
          inline bool valid() const exprtk_override
@@ -13470,7 +13470,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecopvecass;
+            return expression_node<T>::node_type::e_vecopvecass;
          }
 
          inline bool valid() const exprtk_override
@@ -13739,7 +13739,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecvecarith;
+            return expression_node<T>::node_type::e_vecvecarith;
          }
 
          inline bool valid() const exprtk_override
@@ -13906,7 +13906,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecvalarith;
+            return expression_node<T>::node_type::e_vecvalarith;
          }
 
          inline bool valid() const exprtk_override
@@ -14070,7 +14070,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecvalarith;
+            return expression_node<T>::node_type::e_vecvalarith;
          }
 
          inline bool valid() const exprtk_override
@@ -14233,7 +14233,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecunaryop;
+            return expression_node<T>::node_type::e_vecunaryop;
          }
 
          inline bool valid() const exprtk_override
@@ -14380,7 +14380,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vecondition;
+            return expression_node<T>::node_type::e_vecondition;
          }
 
          inline bool valid() const exprtk_override
@@ -14568,7 +14568,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_function;
+            return expression_node<T>::node_type::e_function;
          }
 
          inline bool valid() const exprtk_override
@@ -14844,7 +14844,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_function;
+            return expression_node<T>::node_type::e_function;
          }
 
          inline bool valid() const exprtk_override
@@ -14886,7 +14886,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_vafunction;
+            return expression_node<T>::node_type::e_vafunction;
          }
 
          inline bool valid() const exprtk_override
@@ -15094,7 +15094,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_genfunction;
+            return expression_node<T>::node_type::e_genfunction;
          }
 
          inline bool valid() const exprtk_override
@@ -15215,7 +15215,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_strfunction;
+            return expression_node<T>::node_type::e_strfunction;
          }
 
          inline bool valid() const exprtk_override
@@ -15291,7 +15291,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override exprtk_final
          {
-            return expression_node<T>::e_genfunction;
+            return expression_node<T>::node_type::e_genfunction;
          }
 
       private:
@@ -15340,7 +15340,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_strfunction;
+            return expression_node<T>::node_type::e_strfunction;
          }
 
       private:
@@ -15404,7 +15404,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_return;
+            return expression_node<T>::node_type::e_return;
          }
 
          inline bool valid() const exprtk_override
@@ -15453,7 +15453,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_retenv;
+            return expression_node<T>::node_type::e_retenv;
          }
 
          inline bool valid() const exprtk_override
@@ -15498,12 +15498,12 @@ namespace exprtk
                                                                 \
          static inline node_t type()                            \
          {                                                      \
-            return expression_node<T>::e_##OpName;              \
+            return expression_node<T>::node_type::e_##OpName;              \
          }                                                      \
                                                                 \
          static inline details::operator_type operation()       \
          {                                                      \
-            return details::e_##OpName;                         \
+            return details::operator_type::e_##OpName;                         \
          }                                                      \
       };                                                        \
 
@@ -15570,8 +15570,8 @@ namespace exprtk
          static inline T process(Type t1, Type t2) { return t1 + t2; }
          static inline T process(Type t1, Type t2, Type t3) { return t1 + t2 + t3; }
          static inline void assign(RefType t1, Type t2) { t1 += t2; }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_add; }
-         static inline details::operator_type operation() { return details::e_add; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_add; }
+         static inline details::operator_type operation() { return details::operator_type::e_add; }
       };
 
       template <typename T>
@@ -15583,8 +15583,8 @@ namespace exprtk
          static inline T process(Type t1, Type t2) { return t1 * t2; }
          static inline T process(Type t1, Type t2, Type t3) { return t1 * t2 * t3; }
          static inline void assign(RefType t1, Type t2) { t1 *= t2; }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_mul; }
-         static inline details::operator_type operation() { return details::e_mul; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_mul; }
+         static inline details::operator_type operation() { return details::operator_type::e_mul; }
       };
 
       template <typename T>
@@ -15596,8 +15596,8 @@ namespace exprtk
          static inline T process(Type t1, Type t2) { return t1 - t2; }
          static inline T process(Type t1, Type t2, Type t3) { return t1 - t2 - t3; }
          static inline void assign(RefType t1, Type t2) { t1 -= t2; }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_sub; }
-         static inline details::operator_type operation() { return details::e_sub; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_sub; }
+         static inline details::operator_type operation() { return details::operator_type::e_sub; }
       };
 
       template <typename T>
@@ -15609,8 +15609,8 @@ namespace exprtk
          static inline T process(Type t1, Type t2) { return t1 / t2; }
          static inline T process(Type t1, Type t2, Type t3) { return t1 / t2 / t3; }
          static inline void assign(RefType t1, Type t2) { t1 /= t2; }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_div; }
-         static inline details::operator_type operation() { return details::e_div; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_div; }
+         static inline details::operator_type operation() { return details::operator_type::e_div; }
       };
 
       template <typename T>
@@ -15621,8 +15621,8 @@ namespace exprtk
 
          static inline T process(Type t1, Type t2) { return numeric::modulus<T>(t1,t2); }
          static inline void assign(RefType t1, Type t2) { t1 = numeric::modulus<T>(t1,t2); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_mod; }
-         static inline details::operator_type operation() { return details::e_mod; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_mod; }
+         static inline details::operator_type operation() { return details::operator_type::e_mod; }
       };
 
       template <typename T>
@@ -15633,8 +15633,8 @@ namespace exprtk
 
          static inline T process(Type t1, Type t2) { return numeric::pow<T>(t1,t2); }
          static inline void assign(RefType t1, Type t2) { t1 = numeric::pow<T>(t1,t2); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_pow; }
-         static inline details::operator_type operation() { return details::e_pow; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_pow; }
+         static inline details::operator_type operation() { return details::operator_type::e_pow; }
       };
 
       template <typename T>
@@ -15644,8 +15644,8 @@ namespace exprtk
 
          static inline T process(Type t1, Type t2) { return ((t1 < t2) ? T(1) : T(0)); }
          static inline T process(const std::string& t1, const std::string& t2) { return ((t1 < t2) ? T(1) : T(0)); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_lt; }
-         static inline details::operator_type operation() { return details::e_lt; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_lt; }
+         static inline details::operator_type operation() { return details::operator_type::e_lt; }
       };
 
       template <typename T>
@@ -15655,8 +15655,8 @@ namespace exprtk
 
          static inline T process(Type t1, Type t2) { return ((t1 <= t2) ? T(1) : T(0)); }
          static inline T process(const std::string& t1, const std::string& t2) { return ((t1 <= t2) ? T(1) : T(0)); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_lte; }
-         static inline details::operator_type operation() { return details::e_lte; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_lte; }
+         static inline details::operator_type operation() { return details::operator_type::e_lte; }
       };
 
       template <typename T>
@@ -15666,8 +15666,8 @@ namespace exprtk
 
          static inline T process(Type t1, Type t2) { return ((t1 > t2) ? T(1) : T(0)); }
          static inline T process(const std::string& t1, const std::string& t2) { return ((t1 > t2) ? T(1) : T(0)); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_gt; }
-         static inline details::operator_type operation() { return details::e_gt; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_gt; }
+         static inline details::operator_type operation() { return details::operator_type::e_gt; }
       };
 
       template <typename T>
@@ -15677,8 +15677,8 @@ namespace exprtk
 
          static inline T process(Type t1, Type t2) { return ((t1 >= t2) ? T(1) : T(0)); }
          static inline T process(const std::string& t1, const std::string& t2) { return ((t1 >= t2) ? T(1) : T(0)); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_gte; }
-         static inline details::operator_type operation() { return details::e_gte; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_gte; }
+         static inline details::operator_type operation() { return details::operator_type::e_gte; }
       };
 
       template <typename T>
@@ -15687,8 +15687,8 @@ namespace exprtk
          typedef typename opr_base<T>::Type Type;
          static inline T process(Type t1, Type t2) { return (std::equal_to<T>()(t1,t2) ? T(1) : T(0)); }
          static inline T process(const std::string& t1, const std::string& t2) { return ((t1 == t2) ? T(1) : T(0)); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_eq; }
-         static inline details::operator_type operation() { return details::e_eq; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_eq; }
+         static inline details::operator_type operation() { return details::operator_type::e_eq; }
       };
 
       template <typename T>
@@ -15698,8 +15698,8 @@ namespace exprtk
 
          static inline T process(Type t1, Type t2) { return numeric::equal(t1,t2); }
          static inline T process(const std::string& t1, const std::string& t2) { return ((t1 == t2) ? T(1) : T(0)); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_eq; }
-         static inline details::operator_type operation() { return details::e_equal; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_eq; }
+         static inline details::operator_type operation() { return details::operator_type::e_equal; }
       };
 
       template <typename T>
@@ -15709,8 +15709,8 @@ namespace exprtk
 
          static inline T process(Type t1, Type t2) { return (std::not_equal_to<T>()(t1,t2) ? T(1) : T(0)); }
          static inline T process(const std::string& t1, const std::string& t2) { return ((t1 != t2) ? T(1) : T(0)); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_ne; }
-         static inline details::operator_type operation() { return details::e_ne; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_ne; }
+         static inline details::operator_type operation() { return details::operator_type::e_ne; }
       };
 
       template <typename T>
@@ -15719,8 +15719,8 @@ namespace exprtk
          typedef typename opr_base<T>::Type Type;
 
          static inline T process(Type t1, Type t2) { return (details::is_true(t1) && details::is_true(t2)) ? T(1) : T(0); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_and; }
-         static inline details::operator_type operation() { return details::e_and; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_and; }
+         static inline details::operator_type operation() { return details::operator_type::e_and; }
       };
 
       template <typename T>
@@ -15729,8 +15729,8 @@ namespace exprtk
          typedef typename opr_base<T>::Type Type;
 
          static inline T process(Type t1, Type t2) { return (details::is_true(t1) && details::is_true(t2)) ? T(0) : T(1); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_nand; }
-         static inline details::operator_type operation() { return details::e_nand; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_nand; }
+         static inline details::operator_type operation() { return details::operator_type::e_nand; }
       };
 
       template <typename T>
@@ -15739,8 +15739,8 @@ namespace exprtk
          typedef typename opr_base<T>::Type Type;
 
          static inline T process(Type t1, Type t2) { return (details::is_true(t1) || details::is_true(t2)) ? T(1) : T(0); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_or; }
-         static inline details::operator_type operation() { return details::e_or; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_or; }
+         static inline details::operator_type operation() { return details::operator_type::e_or; }
       };
 
       template <typename T>
@@ -15749,8 +15749,8 @@ namespace exprtk
          typedef typename opr_base<T>::Type Type;
 
          static inline T process(Type t1, Type t2) { return (details::is_true(t1) || details::is_true(t2)) ? T(0) : T(1); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_nor; }
-         static inline details::operator_type operation() { return details::e_nor; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_nor; }
+         static inline details::operator_type operation() { return details::operator_type::e_nor; }
       };
 
       template <typename T>
@@ -15759,8 +15759,8 @@ namespace exprtk
          typedef typename opr_base<T>::Type Type;
 
          static inline T process(Type t1, Type t2) { return numeric::xor_opr<T>(t1,t2); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_nor; }
-         static inline details::operator_type operation() { return details::e_xor; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_nor; }
+         static inline details::operator_type operation() { return details::operator_type::e_xor; }
       };
 
       template <typename T>
@@ -15769,8 +15769,8 @@ namespace exprtk
          typedef typename opr_base<T>::Type Type;
 
          static inline T process(Type t1, Type t2) { return numeric::xnor_opr<T>(t1,t2); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_nor; }
-         static inline details::operator_type operation() { return details::e_xnor; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_nor; }
+         static inline details::operator_type operation() { return details::operator_type::e_xnor; }
       };
 
       template <typename T>
@@ -15780,8 +15780,8 @@ namespace exprtk
 
          static inline T process(const T&, const T&) { return std::numeric_limits<T>::quiet_NaN(); }
          static inline T process(const std::string& t1, const std::string& t2) { return ((std::string::npos != t2.find(t1)) ? T(1) : T(0)); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_in; }
-         static inline details::operator_type operation() { return details::e_in; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_in; }
+         static inline details::operator_type operation() { return details::operator_type::e_in; }
       };
 
       template <typename T>
@@ -15791,8 +15791,8 @@ namespace exprtk
 
          static inline T process(const T&, const T&) { return std::numeric_limits<T>::quiet_NaN(); }
          static inline T process(const std::string& t1, const std::string& t2) { return (details::wc_match(t2,t1) ? T(1) : T(0)); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_like; }
-         static inline details::operator_type operation() { return details::e_like; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_like; }
+         static inline details::operator_type operation() { return details::operator_type::e_like; }
       };
 
       template <typename T>
@@ -15802,8 +15802,8 @@ namespace exprtk
 
          static inline T process(const T&, const T&) { return std::numeric_limits<T>::quiet_NaN(); }
          static inline T process(const std::string& t1, const std::string& t2) { return (details::wc_imatch(t2,t1) ? T(1) : T(0)); }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_ilike; }
-         static inline details::operator_type operation() { return details::e_ilike; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_ilike; }
+         static inline details::operator_type operation() { return details::operator_type::e_ilike; }
       };
 
       template <typename T>
@@ -15816,8 +15816,8 @@ namespace exprtk
          {
             return ((t0 <= t1) && (t1 <= t2)) ? T(1) : T(0);
          }
-         static inline typename expression_node<T>::node_type type() { return expression_node<T>::e_inranges; }
-         static inline details::operator_type operation() { return details::e_inrange; }
+         static inline typename expression_node<T>::node_type type() { return expression_node<T>::node_type::e_inranges; }
+         static inline details::operator_type operation() { return details::operator_type::e_inrange; }
       };
 
       template <typename T>
@@ -16714,7 +16714,7 @@ namespace exprtk
 
          inline virtual operator_type operation() const
          {
-            return details::e_default;
+            return details::operator_type::e_default;
          }
 
          virtual const T& v0() const = 0;
@@ -16732,7 +16732,7 @@ namespace exprtk
 
          inline virtual operator_type operation() const
          {
-            return details::e_default;
+            return details::operator_type::e_default;
          }
 
          virtual const T c() const = 0;
@@ -16750,7 +16750,7 @@ namespace exprtk
 
          inline virtual operator_type operation() const
          {
-            return details::e_default;
+            return details::operator_type::e_default;
          }
 
          virtual const T c() const = 0;
@@ -16790,7 +16790,7 @@ namespace exprtk
 
          inline virtual operator_type operation() const
          {
-            return details::e_default;
+            return details::operator_type::e_default;
          }
 
          virtual const T c() const = 0;
@@ -16810,7 +16810,7 @@ namespace exprtk
 
          inline virtual operator_type operation() const
          {
-            return details::e_default;
+            return details::operator_type::e_default;
          }
 
          virtual const T c() const = 0;
@@ -16830,7 +16830,7 @@ namespace exprtk
 
          inline virtual operator_type operation() const
          {
-            return details::e_default;
+            return details::operator_type::e_default;
          }
 
          virtual const T& v() const = 0;
@@ -16846,7 +16846,7 @@ namespace exprtk
 
          inline virtual operator_type operation() const
          {
-            return details::e_default;
+            return details::operator_type::e_default;
          }
       };
 
@@ -16860,7 +16860,7 @@ namespace exprtk
 
          inline virtual operator_type operation() const
          {
-            return details::e_default;
+            return details::operator_type::e_default;
          }
       };
 
@@ -16953,7 +16953,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_uvouv;
+            return expression_node<T>::node_type::e_uvouv;
          }
 
          inline const T& v0()
@@ -17231,7 +17231,7 @@ namespace exprtk
       template <typename T, typename T0, typename T1>
       struct nodetype_T0oT1 { static const typename expression_node<T>::node_type result; };
       template <typename T, typename T0, typename T1>
-      const typename expression_node<T>::node_type nodetype_T0oT1<T,T0,T1>::result = expression_node<T>::e_none;
+      const typename expression_node<T>::node_type nodetype_T0oT1<T,T0,T1>::result = expression_node<T>::node_type::e_none;
 
       #define synthesis_node_type_define(T0_, T1_, v_)                                                          \
       template <typename T, typename T0, typename T1>                                                           \
@@ -17253,13 +17253,13 @@ namespace exprtk
       template <typename T, typename T0, typename T1, typename T2>
       struct nodetype_T0oT1oT2 { static const typename expression_node<T>::node_type result; };
       template <typename T, typename T0, typename T1, typename T2>
-      const typename expression_node<T>::node_type nodetype_T0oT1oT2<T,T0,T1,T2>::result = expression_node<T>::e_none;
+      const typename expression_node<T>::node_type nodetype_T0oT1oT2<T,T0,T1,T2>::result = expression_node<T>::node_type::e_none;
 
       #define synthesis_node_type_define(T0_, T1_, T2_, v_)                                                            \
       template <typename T, typename T0, typename T1, typename T2>                                                     \
       struct nodetype_T0oT1oT2<T,T0_,T1_,T2_> { static const typename expression_node<T>::node_type result; };         \
       template <typename T, typename T0, typename T1, typename T2>                                                     \
-      const typename expression_node<T>::node_type nodetype_T0oT1oT2<T,T0_,T1_,T2_>::result = expression_node<T>:: v_; \
+      const typename expression_node<T>::node_type nodetype_T0oT1oT2<T,T0_,T1_,T2_>::result = expression_node<T>::node_type:: v_; \
 
       synthesis_node_type_define(const T0&, const T1&, const T2&, e_vovov)
       synthesis_node_type_define(const T0&, const T1&, const T2 , e_vovoc)
@@ -17275,13 +17275,13 @@ namespace exprtk
       template <typename T, typename T0, typename T1, typename T2, typename T3>
       struct nodetype_T0oT1oT2oT3 { static const typename expression_node<T>::node_type result; };
       template <typename T, typename T0, typename T1, typename T2, typename T3>
-      const typename expression_node<T>::node_type nodetype_T0oT1oT2oT3<T,T0,T1,T2,T3>::result = expression_node<T>::e_none;
+      const typename expression_node<T>::node_type nodetype_T0oT1oT2oT3<T,T0,T1,T2,T3>::result = expression_node<T>::node_type::e_none;
 
       #define synthesis_node_type_define(T0_, T1_, T2_, T3_, v_)                                                              \
       template <typename T, typename T0, typename T1, typename T2, typename T3>                                               \
       struct nodetype_T0oT1oT2oT3<T,T0_,T1_,T2_,T3_> { static const typename expression_node<T>::node_type result; };         \
       template <typename T, typename T0, typename T1, typename T2, typename T3>                                               \
-      const typename expression_node<T>::node_type nodetype_T0oT1oT2oT3<T,T0_,T1_,T2_,T3_>::result = expression_node<T>:: v_; \
+      const typename expression_node<T>::node_type nodetype_T0oT1oT2oT3<T,T0_,T1_,T2_,T3_>::result = expression_node<T>::node_type:: v_; \
 
       synthesis_node_type_define(const T0&, const T1&, const T2&, const T3&, e_vovovov)
       synthesis_node_type_define(const T0&, const T1&, const T2&, const T3 , e_vovovoc)
@@ -17325,7 +17325,7 @@ namespace exprtk
 
          inline operator_type operation() const exprtk_override
          {
-            return e_default;
+            return operator_type::e_default;
          }
 
          inline T value() const exprtk_override
@@ -17395,7 +17395,7 @@ namespace exprtk
 
          inline operator_type operation()
          {
-            return e_default;
+            return operator_type::e_default;
          }
 
          inline T value() const exprtk_override
@@ -17582,7 +17582,7 @@ namespace exprtk
 
          inline operator_type operation() const exprtk_override
          {
-            return e_default;
+            return operator_type::e_default;
          }
 
          inline T value() const exprtk_override
@@ -17676,7 +17676,7 @@ namespace exprtk
 
          inline operator_type operation()
          {
-            return e_default;
+            return operator_type::e_default;
          }
 
          inline T value() const exprtk_override
@@ -17732,11 +17732,11 @@ namespace exprtk
       {
          switch (n->type())
          {
-            case expression_node<T>::e_vovov : return true;
-            case expression_node<T>::e_vovoc : return true;
-            case expression_node<T>::e_vocov : return true;
-            case expression_node<T>::e_covov : return true;
-            case expression_node<T>::e_covoc : return true;
+            case expression_node<T>::node_type::e_vovov : return true;
+            case expression_node<T>::node_type::e_vovoc : return true;
+            case expression_node<T>::node_type::e_vocov : return true;
+            case expression_node<T>::node_type::e_covov : return true;
+            case expression_node<T>::node_type::e_covoc : return true;
             default                          : return false;
          }
       }
@@ -17767,7 +17767,7 @@ namespace exprtk
 
          inline operator_type operation() const exprtk_override
          {
-            return e_default;
+            return operator_type::e_default;
          }
 
          inline T value() const exprtk_override
@@ -17910,15 +17910,15 @@ namespace exprtk
       {
          switch (n->type())
          {
-            case expression_node<T>::e_vovovov : return true;
-            case expression_node<T>::e_vovovoc : return true;
-            case expression_node<T>::e_vovocov : return true;
-            case expression_node<T>::e_vocovov : return true;
-            case expression_node<T>::e_covovov : return true;
-            case expression_node<T>::e_covocov : return true;
-            case expression_node<T>::e_vocovoc : return true;
-            case expression_node<T>::e_covovoc : return true;
-            case expression_node<T>::e_vococov : return true;
+            case expression_node<T>::node_type::e_vovovov : return true;
+            case expression_node<T>::node_type::e_vovovoc : return true;
+            case expression_node<T>::node_type::e_vovocov : return true;
+            case expression_node<T>::node_type::e_vocovov : return true;
+            case expression_node<T>::node_type::e_covovov : return true;
+            case expression_node<T>::node_type::e_covocov : return true;
+            case expression_node<T>::node_type::e_vocovoc : return true;
+            case expression_node<T>::node_type::e_covovoc : return true;
+            case expression_node<T>::node_type::e_vococov : return true;
             default                            : return false;
          }
       }
@@ -18805,7 +18805,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_ipow;
+            return expression_node<T>::node_type::e_ipow;
          }
 
       private:
@@ -18838,7 +18838,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_ipow;
+            return expression_node<T>::node_type::e_ipow;
          }
 
          inline bool valid() const exprtk_override
@@ -18883,7 +18883,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_ipowinv;
+            return expression_node<T>::node_type::e_ipowinv;
          }
 
       private:
@@ -18916,7 +18916,7 @@ namespace exprtk
 
          inline typename expression_node<T>::node_type type() const exprtk_override
          {
-            return expression_node<T>::e_ipowinv;
+            return expression_node<T>::node_type::e_ipowinv;
          }
 
          inline bool valid() const exprtk_override
@@ -18993,67 +18993,67 @@ namespace exprtk
       template <typename T>
       inline bool is_string_node(const expression_node<T>* node)
       {
-         return node && (expression_node<T>::e_stringvar == node->type());
+         return node && (expression_node<T>::node_type::e_stringvar == node->type());
       }
 
       template <typename T>
       inline bool is_string_range_node(const expression_node<T>* node)
       {
-         return node && (expression_node<T>::e_stringvarrng == node->type());
+         return node && (expression_node<T>::node_type::e_stringvarrng == node->type());
       }
 
       template <typename T>
       inline bool is_const_string_node(const expression_node<T>* node)
       {
-         return node && (expression_node<T>::e_stringconst == node->type());
+         return node && (expression_node<T>::node_type::e_stringconst == node->type());
       }
 
       template <typename T>
       inline bool is_const_string_range_node(const expression_node<T>* node)
       {
-         return node && (expression_node<T>::e_cstringvarrng == node->type());
+         return node && (expression_node<T>::node_type::e_cstringvarrng == node->type());
       }
 
       template <typename T>
       inline bool is_string_assignment_node(const expression_node<T>* node)
       {
-         return node && (expression_node<T>::e_strass == node->type());
+         return node && (expression_node<T>::node_type::e_strass == node->type());
       }
 
       template <typename T>
       inline bool is_string_concat_node(const expression_node<T>* node)
       {
-         return node && (expression_node<T>::e_strconcat == node->type());
+         return node && (expression_node<T>::node_type::e_strconcat == node->type());
       }
 
       template <typename T>
       inline bool is_string_function_node(const expression_node<T>* node)
       {
-         return node && (expression_node<T>::e_strfunction == node->type());
+         return node && (expression_node<T>::node_type::e_strfunction == node->type());
       }
 
       template <typename T>
       inline bool is_string_condition_node(const expression_node<T>* node)
       {
-         return node && (expression_node<T>::e_strcondition == node->type());
+         return node && (expression_node<T>::node_type::e_strcondition == node->type());
       }
 
       template <typename T>
       inline bool is_string_ccondition_node(const expression_node<T>* node)
       {
-         return node && (expression_node<T>::e_strccondition == node->type());
+         return node && (expression_node<T>::node_type::e_strccondition == node->type());
       }
 
       template <typename T>
       inline bool is_string_vararg_node(const expression_node<T>* node)
       {
-         return node && (expression_node<T>::e_stringvararg == node->type());
+         return node && (expression_node<T>::node_type::e_stringvararg == node->type());
       }
 
       template <typename T>
       inline bool is_genricstring_range_node(const expression_node<T>* node)
       {
-         return node && (expression_node<T>::e_strgenrange == node->type());
+         return node && (expression_node<T>::node_type::e_strgenrange == node->type());
       }
 
       template <typename T>
@@ -19063,17 +19063,17 @@ namespace exprtk
          {
             switch (node->type())
             {
-               case expression_node<T>::e_stringvar     :
-               case expression_node<T>::e_stringconst   :
-               case expression_node<T>::e_stringvarrng  :
-               case expression_node<T>::e_cstringvarrng :
-               case expression_node<T>::e_strgenrange   :
-               case expression_node<T>::e_strass        :
-               case expression_node<T>::e_strconcat     :
-               case expression_node<T>::e_strfunction   :
-               case expression_node<T>::e_strcondition  :
-               case expression_node<T>::e_strccondition :
-               case expression_node<T>::e_stringvararg  : return true;
+               case expression_node<T>::node_type::e_stringvar     :
+               case expression_node<T>::node_type::e_stringconst   :
+               case expression_node<T>::node_type::e_stringvarrng  :
+               case expression_node<T>::node_type::e_cstringvarrng :
+               case expression_node<T>::node_type::e_strgenrange   :
+               case expression_node<T>::node_type::e_strass        :
+               case expression_node<T>::node_type::e_strconcat     :
+               case expression_node<T>::node_type::e_strfunction   :
+               case expression_node<T>::node_type::e_strcondition  :
+               case expression_node<T>::node_type::e_strccondition :
+               case expression_node<T>::node_type::e_stringvararg  : return true;
                default                                  : return false;
             }
          }
@@ -19088,9 +19088,9 @@ namespace exprtk
          {
             switch (node->type())
             {
-               case expression_node<T>::e_for    :
-               case expression_node<T>::e_repeat :
-               case expression_node<T>::e_while  : return true;
+               case expression_node<T>::node_type::e_for    :
+               case expression_node<T>::node_type::e_repeat :
+               case expression_node<T>::node_type::e_while  : return true;
                default                           : return false;
             }
          }
@@ -19110,10 +19110,10 @@ namespace exprtk
 
             switch (node->type())
             {
-               case expression_node<T>::e_conditional :
-               case expression_node<T>::e_mswitch     :
-               case expression_node<T>::e_switch      :
-               case expression_node<T>::e_vararg      : return true;
+               case expression_node<T>::node_type::e_conditional :
+               case expression_node<T>::node_type::e_mswitch     :
+               case expression_node<T>::node_type::e_switch      :
+               case expression_node<T>::node_type::e_vararg      : return true;
                default                                : return false;
             }
          }
@@ -19512,58 +19512,58 @@ namespace exprtk
          #define register_op(Symbol, Type, Args)                                             \
          m.insert(std::make_pair(std::string(Symbol),details::base_operation_t(Type,Args))); \
 
-         register_op("abs"       , e_abs     , 1)
-         register_op("acos"      , e_acos    , 1)
-         register_op("acosh"     , e_acosh   , 1)
-         register_op("asin"      , e_asin    , 1)
-         register_op("asinh"     , e_asinh   , 1)
-         register_op("atan"      , e_atan    , 1)
-         register_op("atanh"     , e_atanh   , 1)
-         register_op("ceil"      , e_ceil    , 1)
-         register_op("cos"       , e_cos     , 1)
-         register_op("cosh"      , e_cosh    , 1)
-         register_op("exp"       , e_exp     , 1)
-         register_op("expm1"     , e_expm1   , 1)
-         register_op("floor"     , e_floor   , 1)
-         register_op("log"       , e_log     , 1)
-         register_op("log10"     , e_log10   , 1)
-         register_op("log2"      , e_log2    , 1)
-         register_op("log1p"     , e_log1p   , 1)
-         register_op("round"     , e_round   , 1)
-         register_op("sin"       , e_sin     , 1)
-         register_op("sinc"      , e_sinc    , 1)
-         register_op("sinh"      , e_sinh    , 1)
-         register_op("sec"       , e_sec     , 1)
-         register_op("csc"       , e_csc     , 1)
-         register_op("sqrt"      , e_sqrt    , 1)
-         register_op("tan"       , e_tan     , 1)
-         register_op("tanh"      , e_tanh    , 1)
-         register_op("cot"       , e_cot     , 1)
-         register_op("rad2deg"   , e_r2d     , 1)
-         register_op("deg2rad"   , e_d2r     , 1)
-         register_op("deg2grad"  , e_d2g     , 1)
-         register_op("grad2deg"  , e_g2d     , 1)
-         register_op("sgn"       , e_sgn     , 1)
-         register_op("not"       , e_notl    , 1)
-         register_op("erf"       , e_erf     , 1)
-         register_op("erfc"      , e_erfc    , 1)
-         register_op("ncdf"      , e_ncdf    , 1)
-         register_op("frac"      , e_frac    , 1)
-         register_op("trunc"     , e_trunc   , 1)
-         register_op("atan2"     , e_atan2   , 2)
-         register_op("mod"       , e_mod     , 2)
-         register_op("logn"      , e_logn    , 2)
-         register_op("pow"       , e_pow     , 2)
-         register_op("root"      , e_root    , 2)
-         register_op("roundn"    , e_roundn  , 2)
-         register_op("equal"     , e_equal   , 2)
-         register_op("not_equal" , e_nequal  , 2)
-         register_op("hypot"     , e_hypot   , 2)
-         register_op("shr"       , e_shr     , 2)
-         register_op("shl"       , e_shl     , 2)
-         register_op("clamp"     , e_clamp   , 3)
-         register_op("iclamp"    , e_iclamp  , 3)
-         register_op("inrange"   , e_inrange , 3)
+         register_op("abs"       , details::operator_type::e_abs     , 1)
+         register_op("acos"      , details::operator_type::e_acos    , 1)
+         register_op("acosh"     , details::operator_type::e_acosh   , 1)
+         register_op("asin"      , details::operator_type::e_asin    , 1)
+         register_op("asinh"     , details::operator_type::e_asinh   , 1)
+         register_op("atan"      , details::operator_type::e_atan    , 1)
+         register_op("atanh"     , details::operator_type::e_atanh   , 1)
+         register_op("ceil"      , details::operator_type::e_ceil    , 1)
+         register_op("cos"       , details::operator_type::e_cos     , 1)
+         register_op("cosh"      , details::operator_type::e_cosh    , 1)
+         register_op("exp"       , details::operator_type::e_exp     , 1)
+         register_op("expm1"     , details::operator_type::e_expm1   , 1)
+         register_op("floor"     , details::operator_type::e_floor   , 1)
+         register_op("log"       , details::operator_type::e_log     , 1)
+         register_op("log10"     , details::operator_type::e_log10   , 1)
+         register_op("log2"      , details::operator_type::e_log2    , 1)
+         register_op("log1p"     , details::operator_type::e_log1p   , 1)
+         register_op("round"     , details::operator_type::e_round   , 1)
+         register_op("sin"       , details::operator_type::e_sin     , 1)
+         register_op("sinc"      , details::operator_type::e_sinc    , 1)
+         register_op("sinh"      , details::operator_type::e_sinh    , 1)
+         register_op("sec"       , details::operator_type::e_sec     , 1)
+         register_op("csc"       , details::operator_type::e_csc     , 1)
+         register_op("sqrt"      , details::operator_type::e_sqrt    , 1)
+         register_op("tan"       , details::operator_type::e_tan     , 1)
+         register_op("tanh"      , details::operator_type::e_tanh    , 1)
+         register_op("cot"       , details::operator_type::e_cot     , 1)
+         register_op("rad2deg"   , details::operator_type::e_r2d     , 1)
+         register_op("deg2rad"   , details::operator_type::e_d2r     , 1)
+         register_op("deg2grad"  , details::operator_type::e_d2g     , 1)
+         register_op("grad2deg"  , details::operator_type::e_g2d     , 1)
+         register_op("sgn"       , details::operator_type::e_sgn     , 1)
+         register_op("not"       , details::operator_type::e_notl    , 1)
+         register_op("erf"       , details::operator_type::e_erf     , 1)
+         register_op("erfc"      , details::operator_type::e_erfc    , 1)
+         register_op("ncdf"      , details::operator_type::e_ncdf    , 1)
+         register_op("frac"      , details::operator_type::e_frac    , 1)
+         register_op("trunc"     , details::operator_type::e_trunc   , 1)
+         register_op("atan2"     , details::operator_type::e_atan2   , 2)
+         register_op("mod"       , details::operator_type::e_mod     , 2)
+         register_op("logn"      , details::operator_type::e_logn    , 2)
+         register_op("pow"       , details::operator_type::e_pow     , 2)
+         register_op("root"      , details::operator_type::e_root    , 2)
+         register_op("roundn"    , details::operator_type::e_roundn  , 2)
+         register_op("equal"     , details::operator_type::e_equal   , 2)
+         register_op("not_equal" , details::operator_type::e_nequal  , 2)
+         register_op("hypot"     , details::operator_type::e_hypot   , 2)
+         register_op("shr"       , details::operator_type::e_shr     , 2)
+         register_op("shl"       , details::operator_type::e_shl     , 2)
+         register_op("clamp"     , details::operator_type::e_clamp   , 3)
+         register_op("iclamp"    , details::operator_type::e_iclamp  , 3)
+         register_op("inrange"   , details::operator_type::e_inrange , 3)
          #undef register_op
       }
 
@@ -24397,12 +24397,12 @@ namespace exprtk
          {
             switch (opr)
             {
-               case details::e_assign : return ":=";
-               case details::e_addass : return "+=";
-               case details::e_subass : return "-=";
-               case details::e_mulass : return "*=";
-               case details::e_divass : return "/=";
-               case details::e_modass : return "%=";
+               case details::operator_type::e_assign : return ":=";
+               case details::operator_type::e_addass : return "+=";
+               case details::operator_type::e_subass : return "-=";
+               case details::operator_type::e_mulass : return "*=";
+               case details::operator_type::e_divass : return "/=";
+               case details::operator_type::e_modass : return "%=";
                default                : return ""  ;
             }
          }
@@ -24411,12 +24411,12 @@ namespace exprtk
          {
             switch (opr)
             {
-               case details::e_add : return "+";
-               case details::e_sub : return "-";
-               case details::e_mul : return "*";
-               case details::e_div : return "/";
-               case details::e_mod : return "%";
-               case details::e_pow : return "^";
+               case details::operator_type::e_add : return "+";
+               case details::operator_type::e_sub : return "-";
+               case details::operator_type::e_mul : return "*";
+               case details::operator_type::e_div : return "/";
+               case details::operator_type::e_mod : return "%";
+               case details::operator_type::e_pow : return "^";
                default             : return "" ;
             }
          }
@@ -24425,14 +24425,14 @@ namespace exprtk
          {
             switch (opr)
             {
-               case details::e_lt    : return "<" ;
-               case details::e_lte   : return "<=";
-               case details::e_eq    : return "==";
-               case details::e_equal : return "=" ;
-               case details::e_ne    : return "!=";
-               case details::e_nequal: return "<>";
-               case details::e_gte   : return ">=";
-               case details::e_gt    : return ">" ;
+               case details::operator_type::e_lt    : return "<" ;
+               case details::operator_type::e_lte   : return "<=";
+               case details::operator_type::e_eq    : return "==";
+               case details::operator_type::e_equal : return "=" ;
+               case details::operator_type::e_ne    : return "!=";
+               case details::operator_type::e_nequal: return "<>";
+               case details::operator_type::e_gte   : return ">=";
+               case details::operator_type::e_gt    : return ">" ;
                default               : return ""  ;
             }
          }
@@ -24441,13 +24441,13 @@ namespace exprtk
          {
             switch (opr)
             {
-               case details::e_and  : return "and" ;
-               case details::e_or   : return "or"  ;
-               case details::e_xor  : return "xor" ;
-               case details::e_nand : return "nand";
-               case details::e_nor  : return "nor" ;
-               case details::e_xnor : return "xnor";
-               case details::e_notl : return "not" ;
+               case details::operator_type::e_and  : return "and" ;
+               case details::operator_type::e_or   : return "or"  ;
+               case details::operator_type::e_xor  : return "xor" ;
+               case details::operator_type::e_nand : return "nand";
+               case details::operator_type::e_nor  : return "nor" ;
+               case details::operator_type::e_xnor : return "xnor";
+               case details::operator_type::e_notl : return "not" ;
                default              : return ""    ;
             }
          }
@@ -25192,7 +25192,7 @@ namespace exprtk
          {
             left      = e_level00;
             right     = e_level00;
-            operation = details::e_default;
+            operation = details::operator_type::e_default;
          }
 
          precedence_level left;
@@ -25279,25 +25279,25 @@ namespace exprtk
 
             switch (current_token().type)
             {
-               case token_t::e_assign : current_state.set(e_level00, e_level00, details::e_assign, current_token()); break;
-               case token_t::e_addass : current_state.set(e_level00, e_level00, details::e_addass, current_token()); break;
-               case token_t::e_subass : current_state.set(e_level00, e_level00, details::e_subass, current_token()); break;
-               case token_t::e_mulass : current_state.set(e_level00, e_level00, details::e_mulass, current_token()); break;
-               case token_t::e_divass : current_state.set(e_level00, e_level00, details::e_divass, current_token()); break;
-               case token_t::e_modass : current_state.set(e_level00, e_level00, details::e_modass, current_token()); break;
-               case token_t::e_swap   : current_state.set(e_level00, e_level00, details::e_swap  , current_token()); break;
-               case token_t::e_lt     : current_state.set(e_level05, e_level06, details::e_lt    , current_token()); break;
-               case token_t::e_lte    : current_state.set(e_level05, e_level06, details::e_lte   , current_token()); break;
-               case token_t::e_eq     : current_state.set(e_level05, e_level06, details::e_eq    , current_token()); break;
-               case token_t::e_ne     : current_state.set(e_level05, e_level06, details::e_ne    , current_token()); break;
-               case token_t::e_gte    : current_state.set(e_level05, e_level06, details::e_gte   , current_token()); break;
-               case token_t::e_gt     : current_state.set(e_level05, e_level06, details::e_gt    , current_token()); break;
-               case token_t::e_add    : current_state.set(e_level07, e_level08, details::e_add   , current_token()); break;
-               case token_t::e_sub    : current_state.set(e_level07, e_level08, details::e_sub   , current_token()); break;
-               case token_t::e_div    : current_state.set(e_level10, e_level11, details::e_div   , current_token()); break;
-               case token_t::e_mul    : current_state.set(e_level10, e_level11, details::e_mul   , current_token()); break;
-               case token_t::e_mod    : current_state.set(e_level10, e_level11, details::e_mod   , current_token()); break;
-               case token_t::e_pow    : current_state.set(e_level12, e_level12, details::e_pow   , current_token()); break;
+               case token_t::e_assign : current_state.set(e_level00, e_level00, details::operator_type::e_assign, current_token()); break;
+               case token_t::e_addass : current_state.set(e_level00, e_level00, details::operator_type::e_addass, current_token()); break;
+               case token_t::e_subass : current_state.set(e_level00, e_level00, details::operator_type::e_subass, current_token()); break;
+               case token_t::e_mulass : current_state.set(e_level00, e_level00, details::operator_type::e_mulass, current_token()); break;
+               case token_t::e_divass : current_state.set(e_level00, e_level00, details::operator_type::e_divass, current_token()); break;
+               case token_t::e_modass : current_state.set(e_level00, e_level00, details::operator_type::e_modass, current_token()); break;
+               case token_t::e_swap   : current_state.set(e_level00, e_level00, details::operator_type::e_swap  , current_token()); break;
+               case token_t::e_lt     : current_state.set(e_level05, e_level06, details::operator_type::e_lt    , current_token()); break;
+               case token_t::e_lte    : current_state.set(e_level05, e_level06, details::operator_type::e_lte   , current_token()); break;
+               case token_t::e_eq     : current_state.set(e_level05, e_level06, details::operator_type::e_eq    , current_token()); break;
+               case token_t::e_ne     : current_state.set(e_level05, e_level06, details::operator_type::e_ne    , current_token()); break;
+               case token_t::e_gte    : current_state.set(e_level05, e_level06, details::operator_type::e_gte   , current_token()); break;
+               case token_t::e_gt     : current_state.set(e_level05, e_level06, details::operator_type::e_gt    , current_token()); break;
+               case token_t::e_add    : current_state.set(e_level07, e_level08, details::operator_type::e_add   , current_token()); break;
+               case token_t::e_sub    : current_state.set(e_level07, e_level08, details::operator_type::e_sub   , current_token()); break;
+               case token_t::e_div    : current_state.set(e_level10, e_level11, details::operator_type::e_div   , current_token()); break;
+               case token_t::e_mul    : current_state.set(e_level10, e_level11, details::operator_type::e_mul   , current_token()); break;
+               case token_t::e_mod    : current_state.set(e_level10, e_level11, details::operator_type::e_mod   , current_token()); break;
+               case token_t::e_pow    : current_state.set(e_level12, e_level12, details::operator_type::e_pow   , current_token()); break;
                default                :
                   if (token_t::e_symbol == current_token().type)
                   {
@@ -25316,65 +25316,65 @@ namespace exprtk
 
                      if (details::imatch(current_token().value,s_and))
                      {
-                        current_state.set(e_level03, e_level04, details::e_and, current_token());
+                        current_state.set(e_level03, e_level04, details::operator_type::e_and, current_token());
                         break;
                      }
                      else if (details::imatch(current_token().value,s_and1))
                      {
                         #ifndef exprtk_disable_sc_andor
-                        current_state.set(e_level03, e_level04, details::e_scand, current_token());
+                        current_state.set(e_level03, e_level04, details::operator_type::e_scand, current_token());
                         #else
-                        current_state.set(e_level03, e_level04, details::e_and, current_token());
+                        current_state.set(e_level03, e_level04, details::operator_type::e_and, current_token());
                         #endif
                         break;
                      }
                      else if (details::imatch(current_token().value,s_nand))
                      {
-                        current_state.set(e_level03, e_level04, details::e_nand, current_token());
+                        current_state.set(e_level03, e_level04, details::operator_type::e_nand, current_token());
                         break;
                      }
                      else if (details::imatch(current_token().value,s_or))
                      {
-                        current_state.set(e_level01, e_level02, details::e_or, current_token());
+                        current_state.set(e_level01, e_level02, details::operator_type::e_or, current_token());
                         break;
                      }
                      else if (details::imatch(current_token().value,s_or1))
                      {
                         #ifndef exprtk_disable_sc_andor
-                        current_state.set(e_level01, e_level02, details::e_scor, current_token());
+                        current_state.set(e_level01, e_level02, details::operator_type::e_scor, current_token());
                         #else
-                        current_state.set(e_level01, e_level02, details::e_or, current_token());
+                        current_state.set(e_level01, e_level02, details::operator_type::e_or, current_token());
                         #endif
                         break;
                      }
                      else if (details::imatch(current_token().value,s_nor))
                      {
-                        current_state.set(e_level01, e_level02, details::e_nor, current_token());
+                        current_state.set(e_level01, e_level02, details::operator_type::e_nor, current_token());
                         break;
                      }
                      else if (details::imatch(current_token().value,s_xor))
                      {
-                        current_state.set(e_level01, e_level02, details::e_xor, current_token());
+                        current_state.set(e_level01, e_level02, details::operator_type::e_xor, current_token());
                         break;
                      }
                      else if (details::imatch(current_token().value,s_xnor))
                      {
-                        current_state.set(e_level01, e_level02, details::e_xnor, current_token());
+                        current_state.set(e_level01, e_level02, details::operator_type::e_xnor, current_token());
                         break;
                      }
                      else if (details::imatch(current_token().value,s_in))
                      {
-                        current_state.set(e_level04, e_level04, details::e_in, current_token());
+                        current_state.set(e_level04, e_level04, details::operator_type::e_in, current_token());
                         break;
                      }
                      else if (details::imatch(current_token().value,s_like))
                      {
-                        current_state.set(e_level04, e_level04, details::e_like, current_token());
+                        current_state.set(e_level04, e_level04, details::operator_type::e_like, current_token());
                         break;
                      }
                      else if (details::imatch(current_token().value,s_ilike))
                      {
-                        current_state.set(e_level04, e_level04, details::e_ilike, current_token());
+                        current_state.set(e_level04, e_level04, details::operator_type::e_ilike, current_token());
                         break;
                      }
                      else if (details::imatch(current_token().value,s_not))
@@ -25531,7 +25531,7 @@ namespace exprtk
          else if (
                    !settings_.commutative_check_enabled()          &&
                    !details::is_logic_opr(current_token().value)   &&
-                   (current_state.operation == details::e_default) &&
+                   (current_state.operation == details::operator_type::e_default) &&
                    (
                      current_token().type == token_t::e_symbol ||
                      current_token().type == token_t::e_number ||
@@ -27437,7 +27437,7 @@ namespace exprtk
       {
          std::vector<expression_node_ptr> arg_list;
 
-         details::operator_type opt_type = details::e_default;
+         details::operator_type opt_type = details::operator_type::e_default;
          const std::string symbol = current_token().value;
 
          if (details::imatch(symbol,"~"))
@@ -27449,13 +27449,13 @@ namespace exprtk
          {
             return check_block_statement_closure(parse_multi_switch_statement());
          }
-         else if (details::imatch(symbol, "avg" )) opt_type = details::e_avg ;
-         else if (details::imatch(symbol, "mand")) opt_type = details::e_mand;
-         else if (details::imatch(symbol, "max" )) opt_type = details::e_max ;
-         else if (details::imatch(symbol, "min" )) opt_type = details::e_min ;
-         else if (details::imatch(symbol, "mor" )) opt_type = details::e_mor ;
-         else if (details::imatch(symbol, "mul" )) opt_type = details::e_prod;
-         else if (details::imatch(symbol, "sum" )) opt_type = details::e_sum ;
+         else if (details::imatch(symbol, "avg" )) opt_type = details::operator_type::e_avg ;
+         else if (details::imatch(symbol, "mand")) opt_type = details::operator_type::e_mand;
+         else if (details::imatch(symbol, "max" )) opt_type = details::operator_type::e_max ;
+         else if (details::imatch(symbol, "min" )) opt_type = details::operator_type::e_min ;
+         else if (details::imatch(symbol, "mor" )) opt_type = details::operator_type::e_mor ;
+         else if (details::imatch(symbol, "mul" )) opt_type = details::operator_type::e_prod;
+         else if (details::imatch(symbol, "sum" )) opt_type = details::operator_type::e_sum ;
          else
          {
             set_error(make_error(
@@ -27748,9 +27748,9 @@ namespace exprtk
          if (1 == expression_list.size())
             return expression_list[0];
          else if (specialise_on_final_type && is_generally_string_node(expression_list.back()))
-            return expression_generator_.vararg_function(details::e_smulti,expression_list);
+            return expression_generator_.vararg_function(details::operator_type::e_smulti,expression_list);
          else
-            return expression_generator_.vararg_function(details::e_multi,expression_list);
+            return expression_generator_.vararg_function(details::operator_type::e_multi,expression_list);
       }
 
       inline expression_node_ptr parse_multi_sequence(const std::string& source = "",
@@ -29090,7 +29090,7 @@ namespace exprtk
          const int id = (sf_name[2] - '0') * 10 +
                         (sf_name[3] - '0');
 
-         if (id >= details::e_sffinal)
+         if (id >= static_cast<int>(details::operator_type::e_sffinal))
          {
             set_error(make_error(
                parser_error::e_token,
@@ -29101,7 +29101,7 @@ namespace exprtk
             return error_node();
          }
 
-         const int sf_3_to_4                   = details::e_sf48;
+         const int sf_3_to_4                   = static_cast<int>(details::operator_type::e_sf48);
          const details::operator_type opt_type = details::operator_type(id + 1000);
          const std::size_t NumberOfParameters  = (id < (sf_3_to_4 - 1000)) ? 3U : 4U;
 
@@ -29246,7 +29246,7 @@ namespace exprtk
          else if (!is_constant_node(size_expression_node))
          {
             const bool is_rebaseble_vector =
-               (size_expression_node->type() == details::expression_node<T>::e_vecsize) &&
+               (size_expression_node->type() == details::expression_node<T>::node_type::e_vecsize) &&
                static_cast<details::vector_size_node<T>*>(size_expression_node)->vec_holder()->rebaseable();
 
             free_node(node_allocator_, size_expression_node);
@@ -29666,7 +29666,7 @@ namespace exprtk
             expression_node_ptr vec_node = node_allocator_.allocate<vector_node_t>(vec_holder);
 
             result = expression_generator_(
-                        details::e_assign,
+                        details::operator_type::e_assign,
                         vec_node,
                         vec_initilizer_list[0]);
          }
@@ -29770,7 +29770,7 @@ namespace exprtk
          branch[0] = str_node;
          branch[1] = initialisation_expression;
 
-         return expression_generator_(details::e_assign,branch);
+         return expression_generator_(details::operator_type::e_assign,branch);
       }
       #else
       inline expression_node_ptr parse_define_string_statement(const std::string&, expression_node_ptr)
@@ -29984,7 +29984,7 @@ namespace exprtk
          branch[0] = var_node;
          branch[1] = initialisation_expression ? initialisation_expression : expression_generator_(T(0));
 
-         return expression_generator_(details::e_assign,branch);
+         return expression_generator_(details::operator_type::e_assign,branch);
       }
 
       inline expression_node_ptr parse_define_constvar_statement()
@@ -31565,7 +31565,7 @@ namespace exprtk
                   )
                )
             {
-               expression_node_ptr result = expression_generator_(details::e_neg,branch);
+               expression_node_ptr result = expression_generator_(details::operator_type::e_neg,branch);
 
                if (0 == result)
                {
@@ -31810,26 +31810,26 @@ namespace exprtk
 
          inline bool unary_optimisable(const details::operator_type& operation) const
          {
-            return (details::e_abs   == operation) || (details::e_acos  == operation) ||
-                   (details::e_acosh == operation) || (details::e_asin  == operation) ||
-                   (details::e_asinh == operation) || (details::e_atan  == operation) ||
-                   (details::e_atanh == operation) || (details::e_ceil  == operation) ||
-                   (details::e_cos   == operation) || (details::e_cosh  == operation) ||
-                   (details::e_exp   == operation) || (details::e_expm1 == operation) ||
-                   (details::e_floor == operation) || (details::e_log   == operation) ||
-                   (details::e_log10 == operation) || (details::e_log2  == operation) ||
-                   (details::e_log1p == operation) || (details::e_neg   == operation) ||
-                   (details::e_pos   == operation) || (details::e_round == operation) ||
-                   (details::e_sin   == operation) || (details::e_sinc  == operation) ||
-                   (details::e_sinh  == operation) || (details::e_sqrt  == operation) ||
-                   (details::e_tan   == operation) || (details::e_tanh  == operation) ||
-                   (details::e_cot   == operation) || (details::e_sec   == operation) ||
-                   (details::e_csc   == operation) || (details::e_r2d   == operation) ||
-                   (details::e_d2r   == operation) || (details::e_d2g   == operation) ||
-                   (details::e_g2d   == operation) || (details::e_notl  == operation) ||
-                   (details::e_sgn   == operation) || (details::e_erf   == operation) ||
-                   (details::e_erfc  == operation) || (details::e_ncdf  == operation) ||
-                   (details::e_frac  == operation) || (details::e_trunc == operation) ;
+            return (details::operator_type::e_abs   == operation) || (details::operator_type::e_acos  == operation) ||
+                   (details::operator_type::e_acosh == operation) || (details::operator_type::e_asin  == operation) ||
+                   (details::operator_type::e_asinh == operation) || (details::operator_type::e_atan  == operation) ||
+                   (details::operator_type::e_atanh == operation) || (details::operator_type::e_ceil  == operation) ||
+                   (details::operator_type::e_cos   == operation) || (details::operator_type::e_cosh  == operation) ||
+                   (details::operator_type::e_exp   == operation) || (details::operator_type::e_expm1 == operation) ||
+                   (details::operator_type::e_floor == operation) || (details::operator_type::e_log   == operation) ||
+                   (details::operator_type::e_log10 == operation) || (details::operator_type::e_log2  == operation) ||
+                   (details::operator_type::e_log1p == operation) || (details::operator_type::e_neg   == operation) ||
+                   (details::operator_type::e_pos   == operation) || (details::operator_type::e_round == operation) ||
+                   (details::operator_type::e_sin   == operation) || (details::operator_type::e_sinc  == operation) ||
+                   (details::operator_type::e_sinh  == operation) || (details::operator_type::e_sqrt  == operation) ||
+                   (details::operator_type::e_tan   == operation) || (details::operator_type::e_tanh  == operation) ||
+                   (details::operator_type::e_cot   == operation) || (details::operator_type::e_sec   == operation) ||
+                   (details::operator_type::e_csc   == operation) || (details::operator_type::e_r2d   == operation) ||
+                   (details::operator_type::e_d2r   == operation) || (details::operator_type::e_d2g   == operation) ||
+                   (details::operator_type::e_g2d   == operation) || (details::operator_type::e_notl  == operation) ||
+                   (details::operator_type::e_sgn   == operation) || (details::operator_type::e_erf   == operation) ||
+                   (details::operator_type::e_erfc  == operation) || (details::operator_type::e_ncdf  == operation) ||
+                   (details::operator_type::e_frac  == operation) || (details::operator_type::e_trunc == operation) ;
          }
 
          inline bool sf3_optimisable(const std::string& sf3id, trinary_functor_t& tfunc) const
@@ -31917,11 +31917,11 @@ namespace exprtk
          inline bool is_assignment_operation(const details::operator_type& operation) const
          {
             return (
-                     (details::e_addass == operation) ||
-                     (details::e_subass == operation) ||
-                     (details::e_mulass == operation) ||
-                     (details::e_divass == operation) ||
-                     (details::e_modass == operation)
+                     (details::operator_type::e_addass == operation) ||
+                     (details::operator_type::e_subass == operation) ||
+                     (details::operator_type::e_mulass == operation) ||
+                     (details::operator_type::e_divass == operation) ||
+                     (details::operator_type::e_modass == operation)
                    ) &&
                    parser_->settings_.assignment_enabled(operation);
          }
@@ -31929,19 +31929,19 @@ namespace exprtk
          #ifndef exprtk_disable_string_capabilities
          inline bool valid_string_operation(const details::operator_type& operation) const
          {
-            return (details::e_add    == operation) ||
-                   (details::e_lt     == operation) ||
-                   (details::e_lte    == operation) ||
-                   (details::e_gt     == operation) ||
-                   (details::e_gte    == operation) ||
-                   (details::e_eq     == operation) ||
-                   (details::e_ne     == operation) ||
-                   (details::e_in     == operation) ||
-                   (details::e_like   == operation) ||
-                   (details::e_ilike  == operation) ||
-                   (details::e_assign == operation) ||
-                   (details::e_addass == operation) ||
-                   (details::e_swap   == operation) ;
+            return (details::operator_type::e_add    == operation) ||
+                   (details::operator_type::e_lt     == operation) ||
+                   (details::operator_type::e_lte    == operation) ||
+                   (details::operator_type::e_gt     == operation) ||
+                   (details::operator_type::e_gte    == operation) ||
+                   (details::operator_type::e_eq     == operation) ||
+                   (details::operator_type::e_ne     == operation) ||
+                   (details::operator_type::e_in     == operation) ||
+                   (details::operator_type::e_like   == operation) ||
+                   (details::operator_type::e_ilike  == operation) ||
+                   (details::operator_type::e_assign == operation) ||
+                   (details::operator_type::e_addass == operation) ||
+                   (details::operator_type::e_swap   == operation) ;
          }
          #else
          inline bool valid_string_operation(const details::operator_type&) const
@@ -31954,48 +31954,48 @@ namespace exprtk
          {
             switch (operation)
             {
-               case details::e_add  : return "+"      ;
-               case details::e_sub  : return "-"      ;
-               case details::e_mul  : return "*"      ;
-               case details::e_div  : return "/"      ;
-               case details::e_mod  : return "%"      ;
-               case details::e_pow  : return "^"      ;
-               case details::e_lt   : return "<"      ;
-               case details::e_lte  : return "<="     ;
-               case details::e_gt   : return ">"      ;
-               case details::e_gte  : return ">="     ;
-               case details::e_eq   : return "=="     ;
-               case details::e_ne   : return "!="     ;
-               case details::e_and  : return "and"    ;
-               case details::e_nand : return "nand"   ;
-               case details::e_or   : return "or"     ;
-               case details::e_nor  : return "nor"    ;
-               case details::e_xor  : return "xor"    ;
-               case details::e_xnor : return "xnor"   ;
+               case details::operator_type::e_add  : return "+"      ;
+               case details::operator_type::e_sub  : return "-"      ;
+               case details::operator_type::e_mul  : return "*"      ;
+               case details::operator_type::e_div  : return "/"      ;
+               case details::operator_type::e_mod  : return "%"      ;
+               case details::operator_type::e_pow  : return "^"      ;
+               case details::operator_type::e_lt   : return "<"      ;
+               case details::operator_type::e_lte  : return "<="     ;
+               case details::operator_type::e_gt   : return ">"      ;
+               case details::operator_type::e_gte  : return ">="     ;
+               case details::operator_type::e_eq   : return "=="     ;
+               case details::operator_type::e_ne   : return "!="     ;
+               case details::operator_type::e_and  : return "and"    ;
+               case details::operator_type::e_nand : return "nand"   ;
+               case details::operator_type::e_or   : return "or"     ;
+               case details::operator_type::e_nor  : return "nor"    ;
+               case details::operator_type::e_xor  : return "xor"    ;
+               case details::operator_type::e_xnor : return "xnor"   ;
                default              : return "UNKNOWN";
             }
          }
 
          inline bool operation_optimisable(const details::operator_type& operation) const
          {
-            return (details::e_add  == operation) ||
-                   (details::e_sub  == operation) ||
-                   (details::e_mul  == operation) ||
-                   (details::e_div  == operation) ||
-                   (details::e_mod  == operation) ||
-                   (details::e_pow  == operation) ||
-                   (details::e_lt   == operation) ||
-                   (details::e_lte  == operation) ||
-                   (details::e_gt   == operation) ||
-                   (details::e_gte  == operation) ||
-                   (details::e_eq   == operation) ||
-                   (details::e_ne   == operation) ||
-                   (details::e_and  == operation) ||
-                   (details::e_nand == operation) ||
-                   (details::e_or   == operation) ||
-                   (details::e_nor  == operation) ||
-                   (details::e_xor  == operation) ||
-                   (details::e_xnor == operation) ;
+            return (details::operator_type::e_add  == operation) ||
+                   (details::operator_type::e_sub  == operation) ||
+                   (details::operator_type::e_mul  == operation) ||
+                   (details::operator_type::e_div  == operation) ||
+                   (details::operator_type::e_mod  == operation) ||
+                   (details::operator_type::e_pow  == operation) ||
+                   (details::operator_type::e_lt   == operation) ||
+                   (details::operator_type::e_lte  == operation) ||
+                   (details::operator_type::e_gt   == operation) ||
+                   (details::operator_type::e_gte  == operation) ||
+                   (details::operator_type::e_eq   == operation) ||
+                   (details::operator_type::e_ne   == operation) ||
+                   (details::operator_type::e_and  == operation) ||
+                   (details::operator_type::e_nand == operation) ||
+                   (details::operator_type::e_or   == operation) ||
+                   (details::operator_type::e_nor  == operation) ||
+                   (details::operator_type::e_xor  == operation) ||
+                   (details::operator_type::e_xnor == operation) ;
          }
 
          inline std::string branch_to_id(expression_node_ptr branch) const
@@ -32092,10 +32092,10 @@ namespace exprtk
          inline bool cocob_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const
          {
             if (
-                 (details::e_add == operation) ||
-                 (details::e_sub == operation) ||
-                 (details::e_mul == operation) ||
-                 (details::e_div == operation)
+                 (details::operator_type::e_add == operation) ||
+                 (details::operator_type::e_sub == operation) ||
+                 (details::operator_type::e_mul == operation) ||
+                 (details::operator_type::e_div == operation)
                )
             {
                return (details::is_constant_node(branch[0]) && details::is_cob_node(branch[1])) ||
@@ -32108,10 +32108,10 @@ namespace exprtk
          inline bool coboc_optimisable(const details::operator_type& operation, expression_node_ptr (&branch)[2]) const
          {
             if (
-                 (details::e_add == operation) ||
-                 (details::e_sub == operation) ||
-                 (details::e_mul == operation) ||
-                 (details::e_div == operation)
+                 (details::operator_type::e_add == operation) ||
+                 (details::operator_type::e_sub == operation) ||
+                 (details::operator_type::e_mul == operation) ||
+                 (details::operator_type::e_div == operation)
                )
             {
                return (details::is_constant_node(branch[0]) && details::is_boc_node(branch[1])) ||
@@ -32242,7 +32242,7 @@ namespace exprtk
 
             if ((b0_string != b1_string) || (b1_string != b2_string))
                result = true;
-            else if ((details::e_inrange != operation) && b0_string && b1_string && b2_string)
+            else if ((details::operator_type::e_inrange != operation) && b0_string && b1_string && b2_string)
                result = true;
 
             if (result)
@@ -32267,15 +32267,15 @@ namespace exprtk
             const bool b1_string = is_generally_string_node(branch[1]);
             const bool b2_string = is_generally_string_node(branch[2]);
 
-            return (b0_string && b1_string && b2_string && (details::e_inrange == operation));
+            return (b0_string && b1_string && b2_string && (details::operator_type::e_inrange == operation));
          }
 
          #ifndef exprtk_disable_sc_andor
          inline bool is_shortcircuit_expression(const details::operator_type& operation) const
          {
             return (
-                     (details::e_scand == operation) ||
-                     (details::e_scor  == operation)
+                     (details::operator_type::e_scand == operation) ||
+                     (details::operator_type::e_scor  == operation)
                    );
          }
          #else
@@ -32299,19 +32299,19 @@ namespace exprtk
                return false;
             else
                return (
-                        (details::e_lt    == operation) ||
-                        (details::e_lte   == operation) ||
-                        (details::e_gt    == operation) ||
-                        (details::e_gte   == operation) ||
-                        (details::e_eq    == operation) ||
-                        (details::e_ne    == operation) ||
-                        (details::e_equal == operation) ||
-                        (details::e_and   == operation) ||
-                        (details::e_nand  == operation) ||
-                        (details::e_or    == operation) ||
-                        (details::e_nor   == operation) ||
-                        (details::e_xor   == operation) ||
-                        (details::e_xnor  == operation)
+                        (details::operator_type::e_lt    == operation) ||
+                        (details::operator_type::e_lte   == operation) ||
+                        (details::operator_type::e_gt    == operation) ||
+                        (details::operator_type::e_gte   == operation) ||
+                        (details::operator_type::e_eq    == operation) ||
+                        (details::operator_type::e_ne    == operation) ||
+                        (details::operator_type::e_equal == operation) ||
+                        (details::operator_type::e_and   == operation) ||
+                        (details::operator_type::e_nand  == operation) ||
+                        (details::operator_type::e_or    == operation) ||
+                        (details::operator_type::e_nor   == operation) ||
+                        (details::operator_type::e_xor   == operation) ||
+                        (details::operator_type::e_xnor  == operation)
                       );
          }
 
@@ -32321,11 +32321,11 @@ namespace exprtk
                return false;
             else
                return (
-                        (details::e_add == operation) ||
-                        (details::e_sub == operation) ||
-                        (details::e_mul == operation) ||
-                        (details::e_div == operation) ||
-                        (details::e_pow == operation)
+                        (details::operator_type::e_add == operation) ||
+                        (details::operator_type::e_sub == operation) ||
+                        (details::operator_type::e_mul == operation) ||
+                        (details::operator_type::e_div == operation) ||
+                        (details::operator_type::e_pow == operation)
                       );
          }
 
@@ -32371,11 +32371,11 @@ namespace exprtk
 
                return error_node();
             }
-            else if (details::e_assign == operation)
+            else if (details::operator_type::e_assign == operation)
             {
                return synthesize_assignment_expression(operation, branch);
             }
-            else if (details::e_swap == operation)
+            else if (details::operator_type::e_swap == operation)
             {
                return synthesize_swap_expression(branch);
             }
@@ -33228,46 +33228,46 @@ namespace exprtk
          }
 
          #define unary_opr_switch_statements             \
-         case_stmt(details::e_abs   , details::abs_op  ) \
-         case_stmt(details::e_acos  , details::acos_op ) \
-         case_stmt(details::e_acosh , details::acosh_op) \
-         case_stmt(details::e_asin  , details::asin_op ) \
-         case_stmt(details::e_asinh , details::asinh_op) \
-         case_stmt(details::e_atan  , details::atan_op ) \
-         case_stmt(details::e_atanh , details::atanh_op) \
-         case_stmt(details::e_ceil  , details::ceil_op ) \
-         case_stmt(details::e_cos   , details::cos_op  ) \
-         case_stmt(details::e_cosh  , details::cosh_op ) \
-         case_stmt(details::e_exp   , details::exp_op  ) \
-         case_stmt(details::e_expm1 , details::expm1_op) \
-         case_stmt(details::e_floor , details::floor_op) \
-         case_stmt(details::e_log   , details::log_op  ) \
-         case_stmt(details::e_log10 , details::log10_op) \
-         case_stmt(details::e_log2  , details::log2_op ) \
-         case_stmt(details::e_log1p , details::log1p_op) \
-         case_stmt(details::e_neg   , details::neg_op  ) \
-         case_stmt(details::e_pos   , details::pos_op  ) \
-         case_stmt(details::e_round , details::round_op) \
-         case_stmt(details::e_sin   , details::sin_op  ) \
-         case_stmt(details::e_sinc  , details::sinc_op ) \
-         case_stmt(details::e_sinh  , details::sinh_op ) \
-         case_stmt(details::e_sqrt  , details::sqrt_op ) \
-         case_stmt(details::e_tan   , details::tan_op  ) \
-         case_stmt(details::e_tanh  , details::tanh_op ) \
-         case_stmt(details::e_cot   , details::cot_op  ) \
-         case_stmt(details::e_sec   , details::sec_op  ) \
-         case_stmt(details::e_csc   , details::csc_op  ) \
-         case_stmt(details::e_r2d   , details::r2d_op  ) \
-         case_stmt(details::e_d2r   , details::d2r_op  ) \
-         case_stmt(details::e_d2g   , details::d2g_op  ) \
-         case_stmt(details::e_g2d   , details::g2d_op  ) \
-         case_stmt(details::e_notl  , details::notl_op ) \
-         case_stmt(details::e_sgn   , details::sgn_op  ) \
-         case_stmt(details::e_erf   , details::erf_op  ) \
-         case_stmt(details::e_erfc  , details::erfc_op ) \
-         case_stmt(details::e_ncdf  , details::ncdf_op ) \
-         case_stmt(details::e_frac  , details::frac_op ) \
-         case_stmt(details::e_trunc , details::trunc_op) \
+         case_stmt(details::operator_type::e_abs   , details::abs_op  ) \
+         case_stmt(details::operator_type::e_acos  , details::acos_op ) \
+         case_stmt(details::operator_type::e_acosh , details::acosh_op) \
+         case_stmt(details::operator_type::e_asin  , details::asin_op ) \
+         case_stmt(details::operator_type::e_asinh , details::asinh_op) \
+         case_stmt(details::operator_type::e_atan  , details::atan_op ) \
+         case_stmt(details::operator_type::e_atanh , details::atanh_op) \
+         case_stmt(details::operator_type::e_ceil  , details::ceil_op ) \
+         case_stmt(details::operator_type::e_cos   , details::cos_op  ) \
+         case_stmt(details::operator_type::e_cosh  , details::cosh_op ) \
+         case_stmt(details::operator_type::e_exp   , details::exp_op  ) \
+         case_stmt(details::operator_type::e_expm1 , details::expm1_op) \
+         case_stmt(details::operator_type::e_floor , details::floor_op) \
+         case_stmt(details::operator_type::e_log   , details::log_op  ) \
+         case_stmt(details::operator_type::e_log10 , details::log10_op) \
+         case_stmt(details::operator_type::e_log2  , details::log2_op ) \
+         case_stmt(details::operator_type::e_log1p , details::log1p_op) \
+         case_stmt(details::operator_type::e_neg   , details::neg_op  ) \
+         case_stmt(details::operator_type::e_pos   , details::pos_op  ) \
+         case_stmt(details::operator_type::e_round , details::round_op) \
+         case_stmt(details::operator_type::e_sin   , details::sin_op  ) \
+         case_stmt(details::operator_type::e_sinc  , details::sinc_op ) \
+         case_stmt(details::operator_type::e_sinh  , details::sinh_op ) \
+         case_stmt(details::operator_type::e_sqrt  , details::sqrt_op ) \
+         case_stmt(details::operator_type::e_tan   , details::tan_op  ) \
+         case_stmt(details::operator_type::e_tanh  , details::tanh_op ) \
+         case_stmt(details::operator_type::e_cot   , details::cot_op  ) \
+         case_stmt(details::operator_type::e_sec   , details::sec_op  ) \
+         case_stmt(details::operator_type::e_csc   , details::csc_op  ) \
+         case_stmt(details::operator_type::e_r2d   , details::r2d_op  ) \
+         case_stmt(details::operator_type::e_d2r   , details::d2r_op  ) \
+         case_stmt(details::operator_type::e_d2g   , details::d2g_op  ) \
+         case_stmt(details::operator_type::e_g2d   , details::g2d_op  ) \
+         case_stmt(details::operator_type::e_notl  , details::notl_op ) \
+         case_stmt(details::operator_type::e_sgn   , details::sgn_op  ) \
+         case_stmt(details::operator_type::e_erf   , details::erf_op  ) \
+         case_stmt(details::operator_type::e_erfc  , details::erfc_op ) \
+         case_stmt(details::operator_type::e_ncdf  , details::ncdf_op ) \
+         case_stmt(details::operator_type::e_frac  , details::frac_op ) \
+         case_stmt(details::operator_type::e_trunc , details::trunc_op) \
 
          inline expression_node_ptr synthesize_uv_expression(const details::operator_type& operation,
                                                              expression_node_ptr (&branch)[1])
@@ -33325,7 +33325,7 @@ namespace exprtk
             switch (operation)
             {
                #define case_stmt(op)                                                        \
-               case details::e_sf##op : temp_node = node_allocator_->                       \
+               case details::operator_type::e_sf##op : temp_node = node_allocator_->                       \
                              allocate<details::sf3_node<Type,details::sf##op##_op<Type> > > \
                                 (operation, branch);                                        \
                              break;                                                         \
@@ -33366,7 +33366,7 @@ namespace exprtk
             switch (operation)
             {
                #define case_stmt(op)                                                                \
-               case details::e_sf##op : return node_allocator_->                                    \
+               case details::operator_type::e_sf##op : return node_allocator_->                                    \
                              allocate_rrr<details::sf3_var_node<Type,details::sf##op##_op<Type> > > \
                                 (v0, v1, v2);                                                       \
 
@@ -33400,7 +33400,7 @@ namespace exprtk
                switch (operation)
                {
                   #define case_stmt(op)                                                        \
-                  case details::e_sf##op : return node_allocator_->                            \
+                  case details::operator_type::e_sf##op : return node_allocator_->                            \
                                 allocate<details::sf3_node<Type,details::sf##op##_op<Type> > > \
                                    (operation, branch);                                        \
 
@@ -33429,7 +33429,7 @@ namespace exprtk
             switch (operation)
             {
                #define case_stmt(op)                                                                    \
-               case details::e_sf##op : temp_node = node_allocator_->                                   \
+               case details::operator_type::e_sf##op : temp_node = node_allocator_->                                   \
                                          allocate<details::sf4_node<Type,details::sf##op##_op<Type> > > \
                                             (operation, branch);                                        \
                                         break;                                                          \
@@ -33472,7 +33472,7 @@ namespace exprtk
             switch (operation)
             {
                #define case_stmt(op)                                                                 \
-               case details::e_sf##op : return node_allocator_->                                     \
+               case details::operator_type::e_sf##op : return node_allocator_->                                     \
                              allocate_rrrr<details::sf4_var_node<Type,details::sf##op##_op<Type> > > \
                                 (v0, v1, v2, v3);                                                    \
 
@@ -33505,7 +33505,7 @@ namespace exprtk
             switch (operation)
             {
                #define case_stmt(op)                                                        \
-               case details::e_sf##op : return node_allocator_->                            \
+               case details::operator_type::e_sf##op : return node_allocator_->                            \
                              allocate<details::sf4_node<Type,details::sf##op##_op<Type> > > \
                                 (operation, branch);                                        \
 
@@ -33541,14 +33541,14 @@ namespace exprtk
                                             (arg_list);                                   \
                           break;                                                          \
 
-               case_stmt(details::e_sum   , details::vararg_add_op  )
-               case_stmt(details::e_prod  , details::vararg_mul_op  )
-               case_stmt(details::e_avg   , details::vararg_avg_op  )
-               case_stmt(details::e_min   , details::vararg_min_op  )
-               case_stmt(details::e_max   , details::vararg_max_op  )
-               case_stmt(details::e_mand  , details::vararg_mand_op )
-               case_stmt(details::e_mor   , details::vararg_mor_op  )
-               case_stmt(details::e_multi , details::vararg_multi_op)
+               case_stmt(details::operator_type::e_sum   , details::vararg_add_op  )
+               case_stmt(details::operator_type::e_prod  , details::vararg_mul_op  )
+               case_stmt(details::operator_type::e_avg   , details::vararg_avg_op  )
+               case_stmt(details::operator_type::e_min   , details::vararg_min_op  )
+               case_stmt(details::operator_type::e_max   , details::vararg_max_op  )
+               case_stmt(details::operator_type::e_mand  , details::vararg_mand_op )
+               case_stmt(details::operator_type::e_mor   , details::vararg_mor_op  )
+               case_stmt(details::operator_type::e_multi , details::vararg_multi_op)
                #undef case_stmt
                default : return error_node();
             }
@@ -33563,11 +33563,11 @@ namespace exprtk
          inline bool special_one_parameter_vararg(const details::operator_type& operation) const
          {
             return (
-                     (details::e_sum  == operation) ||
-                     (details::e_prod == operation) ||
-                     (details::e_avg  == operation) ||
-                     (details::e_min  == operation) ||
-                     (details::e_max  == operation)
+                     (details::operator_type::e_sum  == operation) ||
+                     (details::operator_type::e_prod == operation) ||
+                     (details::operator_type::e_avg  == operation) ||
+                     (details::operator_type::e_min  == operation) ||
+                     (details::operator_type::e_max  == operation)
                    );
          }
 
@@ -33582,14 +33582,14 @@ namespace exprtk
                case op0 : return node_allocator_->                                          \
                              allocate<details::vararg_varnode<Type,op1<Type> > >(arg_list); \
 
-               case_stmt(details::e_sum   , details::vararg_add_op  )
-               case_stmt(details::e_prod  , details::vararg_mul_op  )
-               case_stmt(details::e_avg   , details::vararg_avg_op  )
-               case_stmt(details::e_min   , details::vararg_min_op  )
-               case_stmt(details::e_max   , details::vararg_max_op  )
-               case_stmt(details::e_mand  , details::vararg_mand_op )
-               case_stmt(details::e_mor   , details::vararg_mor_op  )
-               case_stmt(details::e_multi , details::vararg_multi_op)
+               case_stmt(details::operator_type::e_sum   , details::vararg_add_op  )
+               case_stmt(details::operator_type::e_prod  , details::vararg_mul_op  )
+               case_stmt(details::operator_type::e_avg   , details::vararg_avg_op  )
+               case_stmt(details::operator_type::e_min   , details::vararg_min_op  )
+               case_stmt(details::operator_type::e_max   , details::vararg_max_op  )
+               case_stmt(details::operator_type::e_mand  , details::vararg_mand_op )
+               case_stmt(details::operator_type::e_mor   , details::vararg_mor_op  )
+               case_stmt(details::operator_type::e_multi , details::vararg_multi_op)
                #undef case_stmt
                default : return error_node();
             }
@@ -33608,11 +33608,11 @@ namespace exprtk
                   case op0 : return node_allocator_->                                             \
                                 allocate<details::vectorize_node<Type,op1<Type> > >(arg_list[0]); \
 
-                  case_stmt(details::e_sum  , details::vec_add_op)
-                  case_stmt(details::e_prod , details::vec_mul_op)
-                  case_stmt(details::e_avg  , details::vec_avg_op)
-                  case_stmt(details::e_min  , details::vec_min_op)
-                  case_stmt(details::e_max  , details::vec_max_op)
+                  case_stmt(details::operator_type::e_sum  , details::vec_add_op)
+                  case_stmt(details::operator_type::e_prod , details::vec_mul_op)
+                  case_stmt(details::operator_type::e_avg  , details::vec_avg_op)
+                  case_stmt(details::operator_type::e_min  , details::vec_min_op)
+                  case_stmt(details::operator_type::e_max  , details::vec_max_op)
                   #undef case_stmt
                   default : return error_node();
                }
@@ -33642,7 +33642,7 @@ namespace exprtk
                return varnode_optimise_varargfunc(operation,arg_list);
 
             #ifndef exprtk_disable_string_capabilities
-            if (details::e_smulti == operation)
+            if (details::operator_type::e_smulti == operation)
             {
                expression_node_ptr result = node_allocator_->
                  allocate<details::str_vararg_node<Type,details::vararg_multi_op<Type> > >(arg_list);
@@ -33671,14 +33671,14 @@ namespace exprtk
                                 allocate<details::vararg_node<Type,op1<Type> > >(arg_list); \
                              break;                                                         \
 
-                  case_stmt(details::e_sum   , details::vararg_add_op  )
-                  case_stmt(details::e_prod  , details::vararg_mul_op  )
-                  case_stmt(details::e_avg   , details::vararg_avg_op  )
-                  case_stmt(details::e_min   , details::vararg_min_op  )
-                  case_stmt(details::e_max   , details::vararg_max_op  )
-                  case_stmt(details::e_mand  , details::vararg_mand_op )
-                  case_stmt(details::e_mor   , details::vararg_mor_op  )
-                  case_stmt(details::e_multi , details::vararg_multi_op)
+                  case_stmt(details::operator_type::e_sum   , details::vararg_add_op  )
+                  case_stmt(details::operator_type::e_prod  , details::vararg_mul_op  )
+                  case_stmt(details::operator_type::e_avg   , details::vararg_avg_op  )
+                  case_stmt(details::operator_type::e_min   , details::vararg_min_op  )
+                  case_stmt(details::operator_type::e_max   , details::vararg_max_op  )
+                  case_stmt(details::operator_type::e_mand  , details::vararg_mand_op )
+                  case_stmt(details::operator_type::e_mor   , details::vararg_mor_op  )
+                  case_stmt(details::operator_type::e_multi , details::vararg_multi_op)
                   #undef case_stmt
                   default : return error_node();
                }
@@ -34238,18 +34238,14 @@ namespace exprtk
                #endif
 
                case e_st_vector   : {
-                                       typedef details::vector_holder<T> vector_holder_t;
-
-                                       vector_holder_t& vh = static_cast<vector_node_t*>(node)->vec_holder();
+                                       details::vector_holder<T>& vh = static_cast<vector_node_t*>(node)->vec_holder();
 
                                        symbol_name = parser_->symtab_store_.get_vector_name(&vh);
                                     }
                                     break;
 
                case e_st_vecelem  : {
-                                       typedef details::vector_holder<T> vector_holder_t;
-
-                                       vector_holder_t& vh = static_cast<vector_elem_node_t*>(node)->vec_holder();
+                                       details::vector_holder<T>& vh = static_cast<vector_elem_node_t*>(node)->vec_holder();
 
                                        symbol_name = parser_->symtab_store_.get_vector_name(&vh);
 
@@ -34272,41 +34268,41 @@ namespace exprtk
             {
                switch (node->type())
                {
-                  case details::expression_node<T>::e_variable:
+                  case details::expression_node<T>::node_type::e_variable:
                      return reinterpret_cast<const void*>(&static_cast<variable_node_t*>(node)->ref());
 
-                  case details::expression_node<T>::e_vecelem:
+                  case details::expression_node<T>::node_type::e_vecelem:
                      return reinterpret_cast<const void*>(&static_cast<vector_elem_node_t*>(node)->ref());
 
-                  case details::expression_node<T>::e_veccelem:
+                  case details::expression_node<T>::node_type::e_veccelem:
                      return reinterpret_cast<const void*>(&static_cast<vector_celem_node_t*>(node)->ref());
 
-                  case details::expression_node<T>::e_vecelemrtc:
+                  case details::expression_node<T>::node_type::e_vecelemrtc:
                      return reinterpret_cast<const void*>(&static_cast<vector_elem_rtc_node_t*>(node)->ref());
 
-                  case details::expression_node<T>::e_veccelemrtc:
+                  case details::expression_node<T>::node_type::e_veccelemrtc:
                      return reinterpret_cast<const void*>(&static_cast<vector_celem_rtc_node_t*>(node)->ref());
 
-                  case details::expression_node<T>::e_rbvecelem:
+                  case details::expression_node<T>::node_type::e_rbvecelem:
                      return reinterpret_cast<const void*>(&static_cast<rebasevector_elem_node_t*>(node)->ref());
 
-                  case details::expression_node<T>::e_rbvecelemrtc:
+                  case details::expression_node<T>::node_type::e_rbvecelemrtc:
                      return reinterpret_cast<const void*>(&static_cast<rebasevector_elem_rtc_node_t*>(node)->ref());
 
-                  case details::expression_node<T>::e_rbveccelem:
+                  case details::expression_node<T>::node_type::e_rbveccelem:
                      return reinterpret_cast<const void*>(&static_cast<rebasevector_celem_node_t*>(node)->ref());
 
-                  case details::expression_node<T>::e_rbveccelemrtc:
+                  case details::expression_node<T>::node_type::e_rbveccelemrtc:
                      return reinterpret_cast<const void*>(&static_cast<rebasevector_celem_rtc_node_t*>(node)->ref());
 
-                  case details::expression_node<T>::e_vector:
+                  case details::expression_node<T>::node_type::e_vector:
                      return reinterpret_cast<const void*>(static_cast<vector_node_t*>(node)->vec_holder().data());
 
                   #ifndef exprtk_disable_string_capabilities
-                  case details::expression_node<T>::e_stringvar:
+                  case details::expression_node<T>::node_type::e_stringvar:
                      return reinterpret_cast<const void*>((static_cast<stringvar_node_t*>(node)->base()));
 
-                  case details::expression_node<T>::e_stringvarrng:
+                  case details::expression_node<T>::node_type::e_stringvarrng:
                      return reinterpret_cast<const void*>((static_cast<string_range_node_t*>(node)->base()));
                   #endif
                   default : return reinterpret_cast<const void*>(0);
@@ -34448,11 +34444,11 @@ namespace exprtk
                              node_name = "assignment_op_node";                                                \
                              break;                                                                           \
 
-                  case_stmt(details::e_addass , details::add_op)
-                  case_stmt(details::e_subass , details::sub_op)
-                  case_stmt(details::e_mulass , details::mul_op)
-                  case_stmt(details::e_divass , details::div_op)
-                  case_stmt(details::e_modass , details::mod_op)
+                  case_stmt(details::operator_type::e_addass , details::add_op)
+                  case_stmt(details::operator_type::e_subass , details::sub_op)
+                  case_stmt(details::operator_type::e_mulass , details::mul_op)
+                  case_stmt(details::operator_type::e_divass , details::div_op)
+                  case_stmt(details::operator_type::e_modass , details::mod_op)
                   #undef case_stmt
                   default : return error_node();
                }
@@ -34470,11 +34466,11 @@ namespace exprtk
                              node_name = "assignment_vec_elem_op_node";                                                 \
                              break;                                                                                     \
 
-                  case_stmt(details::e_addass , details::add_op)
-                  case_stmt(details::e_subass , details::sub_op)
-                  case_stmt(details::e_mulass , details::mul_op)
-                  case_stmt(details::e_divass , details::div_op)
-                  case_stmt(details::e_modass , details::mod_op)
+                  case_stmt(details::operator_type::e_addass , details::add_op)
+                  case_stmt(details::operator_type::e_subass , details::sub_op)
+                  case_stmt(details::operator_type::e_mulass , details::mul_op)
+                  case_stmt(details::operator_type::e_divass , details::div_op)
+                  case_stmt(details::operator_type::e_modass , details::mod_op)
                   #undef case_stmt
                   default : return error_node();
                }
@@ -34492,11 +34488,11 @@ namespace exprtk
                              node_name = "assignment_vec_elem_op_rtc_node";                                                 \
                              break;                                                                                         \
 
-                  case_stmt(details::e_addass , details::add_op)
-                  case_stmt(details::e_subass , details::sub_op)
-                  case_stmt(details::e_mulass , details::mul_op)
-                  case_stmt(details::e_divass , details::div_op)
-                  case_stmt(details::e_modass , details::mod_op)
+                  case_stmt(details::operator_type::e_addass , details::add_op)
+                  case_stmt(details::operator_type::e_subass , details::sub_op)
+                  case_stmt(details::operator_type::e_mulass , details::mul_op)
+                  case_stmt(details::operator_type::e_divass , details::div_op)
+                  case_stmt(details::operator_type::e_modass , details::mod_op)
                   #undef case_stmt
                   default : return error_node();
                }
@@ -34514,11 +34510,11 @@ namespace exprtk
                              node_name = "assignment_vec_celem_op_rtc_node";                                                 \
                              break;                                                                                          \
 
-                  case_stmt(details::e_addass , details::add_op)
-                  case_stmt(details::e_subass , details::sub_op)
-                  case_stmt(details::e_mulass , details::mul_op)
-                  case_stmt(details::e_divass , details::div_op)
-                  case_stmt(details::e_modass , details::mod_op)
+                  case_stmt(details::operator_type::e_addass , details::add_op)
+                  case_stmt(details::operator_type::e_subass , details::sub_op)
+                  case_stmt(details::operator_type::e_mulass , details::mul_op)
+                  case_stmt(details::operator_type::e_divass , details::div_op)
+                  case_stmt(details::operator_type::e_modass , details::mod_op)
                   #undef case_stmt
                   default : return error_node();
                }
@@ -34536,11 +34532,11 @@ namespace exprtk
                              node_name = "assignment_rebasevec_elem_op_node";                                                 \
                              break;                                                                                           \
 
-                  case_stmt(details::e_addass , details::add_op)
-                  case_stmt(details::e_subass , details::sub_op)
-                  case_stmt(details::e_mulass , details::mul_op)
-                  case_stmt(details::e_divass , details::div_op)
-                  case_stmt(details::e_modass , details::mod_op)
+                  case_stmt(details::operator_type::e_addass , details::add_op)
+                  case_stmt(details::operator_type::e_subass , details::sub_op)
+                  case_stmt(details::operator_type::e_mulass , details::mul_op)
+                  case_stmt(details::operator_type::e_divass , details::div_op)
+                  case_stmt(details::operator_type::e_modass , details::mod_op)
                   #undef case_stmt
                   default : return error_node();
                }
@@ -34558,11 +34554,11 @@ namespace exprtk
                              node_name = "assignment_rebasevec_celem_op_node";                                                 \
                              break;                                                                                            \
 
-                  case_stmt(details::e_addass , details::add_op)
-                  case_stmt(details::e_subass , details::sub_op)
-                  case_stmt(details::e_mulass , details::mul_op)
-                  case_stmt(details::e_divass , details::div_op)
-                  case_stmt(details::e_modass , details::mod_op)
+                  case_stmt(details::operator_type::e_addass , details::add_op)
+                  case_stmt(details::operator_type::e_subass , details::sub_op)
+                  case_stmt(details::operator_type::e_mulass , details::mul_op)
+                  case_stmt(details::operator_type::e_divass , details::div_op)
+                  case_stmt(details::operator_type::e_modass , details::mod_op)
                   #undef case_stmt
                   default : return error_node();
                }
@@ -34580,11 +34576,11 @@ namespace exprtk
                              node_name = "assignment_rebasevec_elem_op_rtc_node";                                                 \
                              break;                                                                                               \
 
-                  case_stmt(details::e_addass , details::add_op)
-                  case_stmt(details::e_subass , details::sub_op)
-                  case_stmt(details::e_mulass , details::mul_op)
-                  case_stmt(details::e_divass , details::div_op)
-                  case_stmt(details::e_modass , details::mod_op)
+                  case_stmt(details::operator_type::e_addass , details::add_op)
+                  case_stmt(details::operator_type::e_subass , details::sub_op)
+                  case_stmt(details::operator_type::e_mulass , details::mul_op)
+                  case_stmt(details::operator_type::e_divass , details::div_op)
+                  case_stmt(details::operator_type::e_modass , details::mod_op)
                   #undef case_stmt
                   default : return error_node();
                }
@@ -34602,11 +34598,11 @@ namespace exprtk
                              node_name = "assignment_rebasevec_celem_op_rtc_node";                                                 \
                              break;                                                                                                \
 
-                  case_stmt(details::e_addass , details::add_op)
-                  case_stmt(details::e_subass , details::sub_op)
-                  case_stmt(details::e_mulass , details::mul_op)
-                  case_stmt(details::e_divass , details::div_op)
-                  case_stmt(details::e_modass , details::mod_op)
+                  case_stmt(details::operator_type::e_addass , details::add_op)
+                  case_stmt(details::operator_type::e_subass , details::sub_op)
+                  case_stmt(details::operator_type::e_mulass , details::mul_op)
+                  case_stmt(details::operator_type::e_divass , details::div_op)
+                  case_stmt(details::operator_type::e_modass , details::mod_op)
                   #undef case_stmt
                   default : return error_node();
                }
@@ -34626,11 +34622,11 @@ namespace exprtk
                                 node_name = "assignment_rebasevec_celem_op_node";                                       \
                                 break;                                                                                  \
 
-                     case_stmt(details::e_addass , details::add_op)
-                     case_stmt(details::e_subass , details::sub_op)
-                     case_stmt(details::e_mulass , details::mul_op)
-                     case_stmt(details::e_divass , details::div_op)
-                     case_stmt(details::e_modass , details::mod_op)
+                     case_stmt(details::operator_type::e_addass , details::add_op)
+                     case_stmt(details::operator_type::e_subass , details::sub_op)
+                     case_stmt(details::operator_type::e_mulass , details::mul_op)
+                     case_stmt(details::operator_type::e_divass , details::div_op)
+                     case_stmt(details::operator_type::e_modass , details::mod_op)
                      #undef case_stmt
                      default : return error_node();
                   }
@@ -34646,11 +34642,11 @@ namespace exprtk
                                 node_name = "assignment_vec_op_node";                                                \
                                 break;                                                                               \
 
-                     case_stmt(details::e_addass , details::add_op)
-                     case_stmt(details::e_subass , details::sub_op)
-                     case_stmt(details::e_mulass , details::mul_op)
-                     case_stmt(details::e_divass , details::div_op)
-                     case_stmt(details::e_modass , details::mod_op)
+                     case_stmt(details::operator_type::e_addass , details::add_op)
+                     case_stmt(details::operator_type::e_subass , details::sub_op)
+                     case_stmt(details::operator_type::e_mulass , details::mul_op)
+                     case_stmt(details::operator_type::e_divass , details::div_op)
+                     case_stmt(details::operator_type::e_modass , details::mod_op)
                      #undef case_stmt
                      default : return error_node();
                   }
@@ -34658,7 +34654,7 @@ namespace exprtk
             }
             #ifndef exprtk_disable_string_capabilities
             else if (
-                      (details::e_addass == operation) &&
+                      (details::operator_type::e_addass == operation) &&
                       details::is_string_node(branch[0])
                     )
             {
@@ -34703,19 +34699,19 @@ namespace exprtk
             const bool is_b1_ivec = details::is_ivector_node(branch[1]);
 
             #define batch_eqineq_logic_case                 \
-            case_stmt(details::e_lt    , details::lt_op   ) \
-            case_stmt(details::e_lte   , details::lte_op  ) \
-            case_stmt(details::e_gt    , details::gt_op   ) \
-            case_stmt(details::e_gte   , details::gte_op  ) \
-            case_stmt(details::e_eq    , details::eq_op   ) \
-            case_stmt(details::e_ne    , details::ne_op   ) \
-            case_stmt(details::e_equal , details::equal_op) \
-            case_stmt(details::e_and   , details::and_op  ) \
-            case_stmt(details::e_nand  , details::nand_op ) \
-            case_stmt(details::e_or    , details::or_op   ) \
-            case_stmt(details::e_nor   , details::nor_op  ) \
-            case_stmt(details::e_xor   , details::xor_op  ) \
-            case_stmt(details::e_xnor  , details::xnor_op ) \
+            case_stmt(details::operator_type::e_lt    , details::lt_op   ) \
+            case_stmt(details::operator_type::e_lte   , details::lte_op  ) \
+            case_stmt(details::operator_type::e_gt    , details::gt_op   ) \
+            case_stmt(details::operator_type::e_gte   , details::gte_op  ) \
+            case_stmt(details::operator_type::e_eq    , details::eq_op   ) \
+            case_stmt(details::operator_type::e_ne    , details::ne_op   ) \
+            case_stmt(details::operator_type::e_equal , details::equal_op) \
+            case_stmt(details::operator_type::e_and   , details::and_op  ) \
+            case_stmt(details::operator_type::e_nand  , details::nand_op ) \
+            case_stmt(details::operator_type::e_or    , details::or_op   ) \
+            case_stmt(details::operator_type::e_nor   , details::nor_op  ) \
+            case_stmt(details::operator_type::e_xor   , details::xor_op  ) \
+            case_stmt(details::operator_type::e_xnor  , details::xnor_op ) \
 
             expression_node_ptr result = error_node();
             std::string node_name = "Unknown";
@@ -34795,11 +34791,11 @@ namespace exprtk
             const bool is_b1_ivec = details::is_ivector_node(branch[1]);
 
             #define vector_ops                          \
-            case_stmt(details::e_add , details::add_op) \
-            case_stmt(details::e_sub , details::sub_op) \
-            case_stmt(details::e_mul , details::mul_op) \
-            case_stmt(details::e_div , details::div_op) \
-            case_stmt(details::e_mod , details::mod_op) \
+            case_stmt(details::operator_type::e_add , details::add_op) \
+            case_stmt(details::operator_type::e_sub , details::sub_op) \
+            case_stmt(details::operator_type::e_mul , details::mul_op) \
+            case_stmt(details::operator_type::e_div , details::div_op) \
+            case_stmt(details::operator_type::e_mod , details::mod_op) \
 
             expression_node_ptr result = error_node();
             std::string node_name = "Unknown";
@@ -34816,7 +34812,7 @@ namespace exprtk
                              break;                                                                              \
 
                   vector_ops
-                  case_stmt(details::e_pow,details:: pow_op)
+                  case_stmt(details::operator_type::e_pow,details:: pow_op)
                   #undef case_stmt
                   default : return error_node();
                }
@@ -34833,7 +34829,7 @@ namespace exprtk
                              break;                                                                              \
 
                   vector_ops
-                  case_stmt(details::e_pow,details:: pow_op)
+                  case_stmt(details::operator_type::e_pow,details:: pow_op)
                   #undef case_stmt
                   default : return error_node();
                }
@@ -34963,12 +34959,12 @@ namespace exprtk
             if (details::is_constant_node(branch[0]))
             {
                if (
-                    (details::e_scand == operation) &&
+                    (details::operator_type::e_scand == operation) &&
                     std::equal_to<T>()(T(0),branch[0]->value())
                   )
                   result = node_allocator_->allocate_c<literal_node_t>(T(0));
                else if (
-                         (details::e_scor == operation) &&
+                         (details::operator_type::e_scor == operation) &&
                          std::not_equal_to<T>()(T(0),branch[0]->value())
                        )
                   result = node_allocator_->allocate_c<literal_node_t>(T(1));
@@ -34977,12 +34973,12 @@ namespace exprtk
             if (details::is_constant_node(branch[1]) && (0 == result))
             {
                if (
-                    (details::e_scand == operation) &&
+                    (details::operator_type::e_scand == operation) &&
                     std::equal_to<T>()(T(0),branch[1]->value())
                   )
                   result = node_allocator_->allocate_c<literal_node_t>(T(0));
                else if (
-                         (details::e_scor == operation) &&
+                         (details::operator_type::e_scor == operation) &&
                          std::not_equal_to<T>()(T(0),branch[1]->value())
                        )
                   result = node_allocator_->allocate_c<literal_node_t>(T(1));
@@ -34995,11 +34991,11 @@ namespace exprtk
 
                return result;
             }
-            else if (details::e_scand == operation)
+            else if (details::operator_type::e_scand == operation)
             {
                return synthesize_expression<scand_node_t,2>(operation, branch);
             }
-            else if (details::e_scor == operation)
+            else if (details::operator_type::e_scor == operation)
             {
                return synthesize_expression<scor_node_t,2>(operation, branch);
             }
@@ -35014,26 +35010,26 @@ namespace exprtk
          #endif
 
          #define basic_opr_switch_statements         \
-         case_stmt(details::e_add , details::add_op) \
-         case_stmt(details::e_sub , details::sub_op) \
-         case_stmt(details::e_mul , details::mul_op) \
-         case_stmt(details::e_div , details::div_op) \
-         case_stmt(details::e_mod , details::mod_op) \
-         case_stmt(details::e_pow , details::pow_op) \
+         case_stmt(details::operator_type::e_add , details::add_op) \
+         case_stmt(details::operator_type::e_sub , details::sub_op) \
+         case_stmt(details::operator_type::e_mul , details::mul_op) \
+         case_stmt(details::operator_type::e_div , details::div_op) \
+         case_stmt(details::operator_type::e_mod , details::mod_op) \
+         case_stmt(details::operator_type::e_pow , details::pow_op) \
 
          #define extended_opr_switch_statements        \
-         case_stmt(details::e_lt   , details::lt_op  ) \
-         case_stmt(details::e_lte  , details::lte_op ) \
-         case_stmt(details::e_gt   , details::gt_op  ) \
-         case_stmt(details::e_gte  , details::gte_op ) \
-         case_stmt(details::e_eq   , details::eq_op  ) \
-         case_stmt(details::e_ne   , details::ne_op  ) \
-         case_stmt(details::e_and  , details::and_op ) \
-         case_stmt(details::e_nand , details::nand_op) \
-         case_stmt(details::e_or   , details::or_op  ) \
-         case_stmt(details::e_nor  , details::nor_op ) \
-         case_stmt(details::e_xor  , details::xor_op ) \
-         case_stmt(details::e_xnor , details::xnor_op) \
+         case_stmt(details::operator_type::e_lt   , details::lt_op  ) \
+         case_stmt(details::operator_type::e_lte  , details::lte_op ) \
+         case_stmt(details::operator_type::e_gt   , details::gt_op  ) \
+         case_stmt(details::operator_type::e_gte  , details::gte_op ) \
+         case_stmt(details::operator_type::e_eq   , details::eq_op  ) \
+         case_stmt(details::operator_type::e_ne   , details::ne_op  ) \
+         case_stmt(details::operator_type::e_and  , details::and_op ) \
+         case_stmt(details::operator_type::e_nand , details::nand_op) \
+         case_stmt(details::operator_type::e_or   , details::or_op  ) \
+         case_stmt(details::operator_type::e_nor  , details::nor_op ) \
+         case_stmt(details::operator_type::e_xor  , details::xor_op ) \
+         case_stmt(details::operator_type::e_xnor , details::xnor_op) \
 
          #ifndef exprtk_disable_cardinal_pow_optimisation
          template <typename TType, template <typename, typename> class IPowNode>
@@ -35088,7 +35084,7 @@ namespace exprtk
 
          inline bool cardinal_pow_optimisable(const details::operator_type& operation, const T& c) const
          {
-            return (details::e_pow == operation) && (details::numeric::abs(c) <= T(60)) && details::numeric::is_integer(c);
+            return (details::operator_type::e_pow == operation) && (details::numeric::abs(c) <= T(60)) && details::numeric::is_integer(c);
          }
 
          inline expression_node_ptr cardinal_pow_optimisation(expression_node_ptr (&branch)[2])
@@ -35139,10 +35135,10 @@ namespace exprtk
                if (left_neg && right_neg)
                {
                   if (
-                       (details::e_add == operation) ||
-                       (details::e_sub == operation) ||
-                       (details::e_mul == operation) ||
-                       (details::e_div == operation)
+                       (details::operator_type::e_add == operation) ||
+                       (details::operator_type::e_sub == operation) ||
+                       (details::operator_type::e_mul == operation) ||
+                       (details::operator_type::e_div == operation)
                      )
                   {
                      if (
@@ -35159,13 +35155,13 @@ namespace exprtk
                   switch (operation)
                   {
                                            // -f(x + 1) + -g(y + 1) --> -(f(x + 1) + g(y + 1))
-                     case details::e_add : return expr_gen(details::e_neg,
+                     case details::operator_type::e_add : return expr_gen(details::operator_type::e_neg,
                                               expr_gen.node_allocator_->
                                                  template allocate<typename details::binary_ext_node<Type,details::add_op<Type> > >
                                                     (branch[0],branch[1]));
 
                                            // -f(x + 1) - -g(y + 1) --> g(y + 1) - f(x + 1)
-                     case details::e_sub : return expr_gen.node_allocator_->
+                     case details::operator_type::e_sub : return expr_gen.node_allocator_->
                                               template allocate<typename details::binary_ext_node<Type,details::sub_op<Type> > >
                                                  (branch[1],branch[0]);
 
@@ -35175,10 +35171,10 @@ namespace exprtk
                else if (left_neg && !right_neg)
                {
                   if (
-                       (details::e_add == operation) ||
-                       (details::e_sub == operation) ||
-                       (details::e_mul == operation) ||
-                       (details::e_div == operation)
+                       (details::operator_type::e_add == operation) ||
+                       (details::operator_type::e_sub == operation) ||
+                       (details::operator_type::e_mul == operation) ||
+                       (details::operator_type::e_div == operation)
                      )
                   {
                      if (!expr_gen.parser_->simplify_unary_negation_branch(branch[0]))
@@ -35191,24 +35187,24 @@ namespace exprtk
                      switch (operation)
                      {
                                               // -f(x + 1) + g(y + 1) --> g(y + 1) - f(x + 1)
-                        case details::e_add : return expr_gen.node_allocator_->
+                        case details::operator_type::e_add : return expr_gen.node_allocator_->
                                                  template allocate<typename details::binary_ext_node<Type,details::sub_op<Type> > >
                                                    (branch[1], branch[0]);
 
                                               // -f(x + 1) - g(y + 1) --> -(f(x + 1) + g(y + 1))
-                        case details::e_sub : return expr_gen(details::e_neg,
+                        case details::operator_type::e_sub : return expr_gen(details::operator_type::e_neg,
                                                  expr_gen.node_allocator_->
                                                     template allocate<typename details::binary_ext_node<Type,details::add_op<Type> > >
                                                        (branch[0], branch[1]));
 
                                               // -f(x + 1) * g(y + 1) --> -(f(x + 1) * g(y + 1))
-                        case details::e_mul : return expr_gen(details::e_neg,
+                        case details::operator_type::e_mul : return expr_gen(details::operator_type::e_neg,
                                                  expr_gen.node_allocator_->
                                                     template allocate<typename details::binary_ext_node<Type,details::mul_op<Type> > >
                                                        (branch[0], branch[1]));
 
                                               // -f(x + 1) / g(y + 1) --> -(f(x + 1) / g(y + 1))
-                        case details::e_div : return expr_gen(details::e_neg,
+                        case details::operator_type::e_div : return expr_gen(details::operator_type::e_neg,
                                                  expr_gen.node_allocator_->
                                                     template allocate<typename details::binary_ext_node<Type,details::div_op<Type> > >
                                                        (branch[0], branch[1]));
@@ -35220,10 +35216,10 @@ namespace exprtk
                else if (!left_neg && right_neg)
                {
                   if (
-                       (details::e_add == operation) ||
-                       (details::e_sub == operation) ||
-                       (details::e_mul == operation) ||
-                       (details::e_div == operation)
+                       (details::operator_type::e_add == operation) ||
+                       (details::operator_type::e_sub == operation) ||
+                       (details::operator_type::e_mul == operation) ||
+                       (details::operator_type::e_div == operation)
                      )
                   {
                      if (!expr_gen.parser_->simplify_unary_negation_branch(branch[1]))
@@ -35236,23 +35232,23 @@ namespace exprtk
                      switch (operation)
                      {
                                               // f(x + 1) + -g(y + 1) --> f(x + 1) - g(y + 1)
-                        case details::e_add : return expr_gen.node_allocator_->
+                        case details::operator_type::e_add : return expr_gen.node_allocator_->
                                                  template allocate<typename details::binary_ext_node<Type,details::sub_op<Type> > >
                                                    (branch[0], branch[1]);
 
                                               // f(x + 1) - - g(y + 1) --> f(x + 1) + g(y + 1)
-                        case details::e_sub : return expr_gen.node_allocator_->
+                        case details::operator_type::e_sub : return expr_gen.node_allocator_->
                                                  template allocate<typename details::binary_ext_node<Type,details::add_op<Type> > >
                                                    (branch[0], branch[1]);
 
                                               // f(x + 1) * -g(y + 1) --> -(f(x + 1) * g(y + 1))
-                        case details::e_mul : return expr_gen(details::e_neg,
+                        case details::operator_type::e_mul : return expr_gen(details::operator_type::e_neg,
                                                  expr_gen.node_allocator_->
                                                     template allocate<typename details::binary_ext_node<Type,details::mul_op<Type> > >
                                                        (branch[0], branch[1]));
 
                                               // f(x + 1) / -g(y + 1) --> -(f(x + 1) / g(y + 1))
-                        case details::e_div : return expr_gen(details::e_neg,
+                        case details::operator_type::e_div : return expr_gen(details::operator_type::e_neg,
                                                  expr_gen.node_allocator_->
                                                     template allocate<typename details::binary_ext_node<Type,details::div_op<Type> > >
                                                        (branch[0], branch[1]));
@@ -35303,8 +35299,8 @@ namespace exprtk
                #endif
 
                if (
-                    (details::e_mul == operation) ||
-                    (details::e_div == operation)
+                    (details::operator_type::e_mul == operation) ||
+                    (details::operator_type::e_div == operation)
                   )
                {
                   if (details::is_uv_node(branch[1]))
@@ -35313,7 +35309,7 @@ namespace exprtk
 
                      details::operator_type o = static_cast<uvbn_ptr_t>(branch[1])->operation();
 
-                     if (details::e_neg == o)
+                     if (details::operator_type::e_neg == o)
                      {
                         const Type& v1 = static_cast<uvbn_ptr_t>(branch[1])->v();
 
@@ -35321,12 +35317,12 @@ namespace exprtk
 
                         switch (operation)
                         {
-                           case details::e_mul : return expr_gen(details::e_neg,
+                           case details::operator_type::e_mul : return expr_gen(details::operator_type::e_neg,
                                                     expr_gen.node_allocator_->
                                                        template allocate_rr<typename details::
                                                           vov_node<Type,details::mul_op<Type> > >(v,v1));
 
-                           case details::e_div : return expr_gen(details::e_neg,
+                           case details::operator_type::e_div : return expr_gen(details::operator_type::e_neg,
                                                     expr_gen.node_allocator_->
                                                        template allocate_rr<typename details::
                                                           vov_node<Type,details::div_op<Type> > >(v,v1));
@@ -35379,10 +35375,10 @@ namespace exprtk
                #endif
 
                if (
-                    (details::e_add == operation) ||
-                    (details::e_sub == operation) ||
-                    (details::e_mul == operation) ||
-                    (details::e_div == operation)
+                    (details::operator_type::e_add == operation) ||
+                    (details::operator_type::e_sub == operation) ||
+                    (details::operator_type::e_mul == operation) ||
+                    (details::operator_type::e_div == operation)
                   )
                {
                   if (details::is_uv_node(branch[0]))
@@ -35391,7 +35387,7 @@ namespace exprtk
 
                      details::operator_type o = static_cast<uvbn_ptr_t>(branch[0])->operation();
 
-                     if (details::e_neg == o)
+                     if (details::operator_type::e_neg == o)
                      {
                         const Type& v0 = static_cast<uvbn_ptr_t>(branch[0])->v();
 
@@ -35399,21 +35395,21 @@ namespace exprtk
 
                         switch (operation)
                         {
-                           case details::e_add : return expr_gen.node_allocator_->
+                           case details::operator_type::e_add : return expr_gen.node_allocator_->
                                                     template allocate_rr<typename details::
                                                        vov_node<Type,details::sub_op<Type> > >(v,v0);
 
-                           case details::e_sub : return expr_gen(details::e_neg,
+                           case details::operator_type::e_sub : return expr_gen(details::operator_type::e_neg,
                                                     expr_gen.node_allocator_->
                                                        template allocate_rr<typename details::
                                                           vov_node<Type,details::add_op<Type> > >(v0,v));
 
-                           case details::e_mul : return expr_gen(details::e_neg,
+                           case details::operator_type::e_mul : return expr_gen(details::operator_type::e_neg,
                                                     expr_gen.node_allocator_->
                                                        template allocate_rr<typename details::
                                                           vov_node<Type,details::mul_op<Type> > >(v0,v));
 
-                           case details::e_div : return expr_gen(details::e_neg,
+                           case details::operator_type::e_div : return expr_gen(details::operator_type::e_neg,
                                                     expr_gen.node_allocator_->
                                                        template allocate_rr<typename details::
                                                           vov_node<Type,details::div_op<Type> > >(v0,v));
@@ -35448,21 +35444,21 @@ namespace exprtk
 
                details::free_node(*expr_gen.node_allocator_,branch[0]);
 
-               if (std::equal_to<T>()(T(0),c) && (details::e_mul == operation))
+               if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_mul == operation))
                {
                   details::free_node(*expr_gen.node_allocator_,branch[1]);
 
                   return expr_gen(T(0));
                }
-               else if (std::equal_to<T>()(T(0),c) && (details::e_div == operation))
+               else if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_div == operation))
                {
                   details::free_node(*expr_gen.node_allocator_, branch[1]);
 
                   return expr_gen(T(0));
                }
-               else if (std::equal_to<T>()(T(0),c) && (details::e_add == operation))
+               else if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_add == operation))
                   return branch[1];
-               else if (std::equal_to<T>()(T(1),c) && (details::e_mul == operation))
+               else if (std::equal_to<T>()(T(1),c) && (details::operator_type::e_mul == operation))
                   return branch[1];
 
                if (details::is_cob_node(branch[1]))
@@ -35471,8 +35467,8 @@ namespace exprtk
                   // 1. (1 * (2 * (3 * (4 * (5 * (6 * (7 * (8 * (9 + x))))))))) --> 40320 * (9 + x)
                   // 2. (1 + (2 + (3 + (4 + (5 + (6 + (7 + (8 + (9 + x))))))))) --> 45 + x
                   if (
-                       (details::e_mul == operation) ||
-                       (details::e_add == operation)
+                       (details::operator_type::e_mul == operation) ||
+                       (details::operator_type::e_add == operation)
                      )
                   {
                      details::cob_base_node<Type>* cobnode = static_cast<details::cob_base_node<Type>*>(branch[1]);
@@ -35481,8 +35477,8 @@ namespace exprtk
                      {
                         switch (operation)
                         {
-                           case details::e_add : cobnode->set_c(c + cobnode->c()); break;
-                           case details::e_mul : cobnode->set_c(c * cobnode->c()); break;
+                           case details::operator_type::e_add : cobnode->set_c(c + cobnode->c()); break;
+                           case details::operator_type::e_mul : cobnode->set_c(c * cobnode->c()); break;
                            default             : return error_node();
                         }
 
@@ -35490,46 +35486,46 @@ namespace exprtk
                      }
                   }
 
-                  if (operation == details::e_mul)
+                  if (operation == details::operator_type::e_mul)
                   {
                      details::cob_base_node<Type>* cobnode = static_cast<details::cob_base_node<Type>*>(branch[1]);
                      details::operator_type cob_opr = cobnode->operation();
 
                      if (
-                          (details::e_div == cob_opr) ||
-                          (details::e_mul == cob_opr)
+                          (details::operator_type::e_div == cob_opr) ||
+                          (details::operator_type::e_mul == cob_opr)
                         )
                      {
                         switch (cob_opr)
                         {
-                           case details::e_div : cobnode->set_c(c * cobnode->c()); break;
-                           case details::e_mul : cobnode->set_c(cobnode->c() / c); break;
+                           case details::operator_type::e_div : cobnode->set_c(c * cobnode->c()); break;
+                           case details::operator_type::e_mul : cobnode->set_c(cobnode->c() / c); break;
                            default             : return error_node();
                         }
 
                         return cobnode;
                      }
                   }
-                  else if (operation == details::e_div)
+                  else if (operation == details::operator_type::e_div)
                   {
                      details::cob_base_node<Type>* cobnode = static_cast<details::cob_base_node<Type>*>(branch[1]);
                      details::operator_type cob_opr = cobnode->operation();
 
                      if (
-                          (details::e_div == cob_opr) ||
-                          (details::e_mul == cob_opr)
+                          (details::operator_type::e_div == cob_opr) ||
+                          (details::operator_type::e_mul == cob_opr)
                         )
                      {
                         details::expression_node<Type>* new_cobnode = error_node();
 
                         switch (cob_opr)
                         {
-                           case details::e_div : new_cobnode = expr_gen.node_allocator_->
+                           case details::operator_type::e_div : new_cobnode = expr_gen.node_allocator_->
                                                     template allocate_tt<typename details::cob_node<Type,details::mul_op<Type> > >
                                                        (c / cobnode->c(), cobnode->move_branch(0));
                                                  break;
 
-                           case details::e_mul : new_cobnode = expr_gen.node_allocator_->
+                           case details::operator_type::e_mul : new_cobnode = expr_gen.node_allocator_->
                                                     template allocate_tt<typename details::cob_node<Type,details::div_op<Type> > >
                                                        (c / cobnode->c(), cobnode->move_branch(0));
                                                  break;
@@ -35586,21 +35582,21 @@ namespace exprtk
 
                details::free_node(*(expr_gen.node_allocator_), branch[1]);
 
-               if (std::equal_to<T>()(T(0),c) && (details::e_mul == operation))
+               if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_mul == operation))
                {
                   details::free_node(*expr_gen.node_allocator_, branch[0]);
 
                   return expr_gen(T(0));
                }
-               else if (std::equal_to<T>()(T(0),c) && (details::e_div == operation))
+               else if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_div == operation))
                {
                   details::free_node(*expr_gen.node_allocator_, branch[0]);
 
                   return expr_gen(std::numeric_limits<T>::quiet_NaN());
                }
-               else if (std::equal_to<T>()(T(0),c) && (details::e_add == operation))
+               else if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_add == operation))
                   return branch[0];
-               else if (std::equal_to<T>()(T(1),c) && (details::e_mul == operation))
+               else if (std::equal_to<T>()(T(1),c) && (details::operator_type::e_mul == operation))
                   return branch[0];
 
                if (details::is_boc_node(branch[0]))
@@ -35609,8 +35605,8 @@ namespace exprtk
                   // 1. (((((((((x + 9) * 8) * 7) * 6) * 5) * 4) * 3) * 2) * 1) --> (x + 9) * 40320
                   // 2. (((((((((x + 9) + 8) + 7) + 6) + 5) + 4) + 3) + 2) + 1) --> x + 45
                   if (
-                       (details::e_mul == operation) ||
-                       (details::e_add == operation)
+                       (details::operator_type::e_mul == operation) ||
+                       (details::operator_type::e_add == operation)
                      )
                   {
                      details::boc_base_node<Type>* bocnode = static_cast<details::boc_base_node<Type>*>(branch[0]);
@@ -35619,41 +35615,41 @@ namespace exprtk
                      {
                         switch (operation)
                         {
-                           case details::e_add : bocnode->set_c(c + bocnode->c()); break;
-                           case details::e_mul : bocnode->set_c(c * bocnode->c()); break;
+                           case details::operator_type::e_add : bocnode->set_c(c + bocnode->c()); break;
+                           case details::operator_type::e_mul : bocnode->set_c(c * bocnode->c()); break;
                            default             : return error_node();
                         }
 
                         return bocnode;
                      }
                   }
-                  else if (operation == details::e_div)
+                  else if (operation == details::operator_type::e_div)
                   {
                      details::boc_base_node<Type>* bocnode = static_cast<details::boc_base_node<Type>*>(branch[0]);
                      details::operator_type        boc_opr = bocnode->operation();
 
                      if (
-                          (details::e_div == boc_opr) ||
-                          (details::e_mul == boc_opr)
+                          (details::operator_type::e_div == boc_opr) ||
+                          (details::operator_type::e_mul == boc_opr)
                         )
                      {
                         switch (boc_opr)
                         {
-                           case details::e_div : bocnode->set_c(c * bocnode->c()); break;
-                           case details::e_mul : bocnode->set_c(bocnode->c() / c); break;
+                           case details::operator_type::e_div : bocnode->set_c(c * bocnode->c()); break;
+                           case details::operator_type::e_mul : bocnode->set_c(bocnode->c() / c); break;
                            default             : return error_node();
                         }
 
                         return bocnode;
                      }
                   }
-                  else if (operation == details::e_pow)
+                  else if (operation == details::operator_type::e_pow)
                   {
                      // (v ^ c0) ^ c1 --> v ^(c0 * c1)
                      details::boc_base_node<Type>* bocnode = static_cast<details::boc_base_node<Type>*>(branch[0]);
                      details::operator_type        boc_opr = bocnode->operation();
 
-                     if (details::e_pow == boc_opr)
+                     if (details::operator_type::e_pow == boc_opr)
                      {
                         bocnode->set_c(bocnode->c() * c);
 
@@ -35710,72 +35706,72 @@ namespace exprtk
 
                   const Type c = static_cast<details::literal_node<Type>*>(branch[1])->value();
 
-                  if (std::equal_to<T>()(T(0),c) && (details::e_mul == operation))
+                  if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_mul == operation))
                   {
                      details::free_node(*expr_gen.node_allocator_, branch[0]);
                      details::free_node(*expr_gen.node_allocator_, branch[1]);
 
                      return expr_gen(T(0));
                   }
-                  else if (std::equal_to<T>()(T(0),c) && (details::e_div == operation))
+                  else if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_div == operation))
                   {
                      details::free_node(*expr_gen.node_allocator_, branch[0]);
                      details::free_node(*expr_gen.node_allocator_, branch[1]);
 
                      return expr_gen(T(std::numeric_limits<T>::quiet_NaN()));
                   }
-                  else if (std::equal_to<T>()(T(0),c) && (details::e_add == operation))
+                  else if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_add == operation))
                   {
                      details::free_node(*expr_gen.node_allocator_, branch[1]);
 
                      return branch[0];
                   }
-                  else if (std::equal_to<T>()(T(1),c) && (details::e_mul == operation))
+                  else if (std::equal_to<T>()(T(1),c) && (details::operator_type::e_mul == operation))
                   {
                      details::free_node(*expr_gen.node_allocator_, branch[1]);
 
                      return branch[0];
                   }
-                  else if (std::equal_to<T>()(T(1),c) && (details::e_div == operation))
+                  else if (std::equal_to<T>()(T(1),c) && (details::operator_type::e_div == operation))
                   {
                      details::free_node(*expr_gen.node_allocator_, branch[1]);
 
                      return branch[0];
                   }
 
-                  const bool op_addsub = (details::e_add == cobnode->operation()) ||
-                                         (details::e_sub == cobnode->operation()) ;
+                  const bool op_addsub = (details::operator_type::e_add == cobnode->operation()) ||
+                                         (details::operator_type::e_sub == cobnode->operation()) ;
 
                   if (op_addsub)
                   {
                      switch (operation)
                      {
-                        case details::e_add : cobnode->set_c(cobnode->c() + c); break;
-                        case details::e_sub : cobnode->set_c(cobnode->c() - c); break;
+                        case details::operator_type::e_add : cobnode->set_c(cobnode->c() + c); break;
+                        case details::operator_type::e_sub : cobnode->set_c(cobnode->c() - c); break;
                         default             : return error_node();
                      }
 
                      result = cobnode;
                   }
-                  else if (details::e_mul == cobnode->operation())
+                  else if (details::operator_type::e_mul == cobnode->operation())
                   {
                      switch (operation)
                      {
-                        case details::e_mul : cobnode->set_c(cobnode->c() * c); break;
-                        case details::e_div : cobnode->set_c(cobnode->c() / c); break;
+                        case details::operator_type::e_mul : cobnode->set_c(cobnode->c() * c); break;
+                        case details::operator_type::e_div : cobnode->set_c(cobnode->c() / c); break;
                         default             : return error_node();
                      }
 
                      result = cobnode;
                   }
-                  else if (details::e_div == cobnode->operation())
+                  else if (details::operator_type::e_div == cobnode->operation())
                   {
-                     if (details::e_mul == operation)
+                     if (details::operator_type::e_mul == operation)
                      {
                         cobnode->set_c(cobnode->c() * c);
                         result = cobnode;
                      }
-                     else if (details::e_div == operation)
+                     else if (details::operator_type::e_div == operation)
                      {
                         result = expr_gen.node_allocator_->
                                     template allocate_tt<typename details::cob_node<Type,details::div_op<Type> > >
@@ -35798,41 +35794,41 @@ namespace exprtk
 
                   const Type c = static_cast<details::literal_node<Type>*>(branch[0])->value();
 
-                  if (std::equal_to<T>()(T(0),c) && (details::e_mul == operation))
+                  if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_mul == operation))
                   {
                      details::free_node(*expr_gen.node_allocator_, branch[0]);
                      details::free_node(*expr_gen.node_allocator_, branch[1]);
 
                      return expr_gen(T(0));
                   }
-                  else if (std::equal_to<T>()(T(0),c) && (details::e_div == operation))
+                  else if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_div == operation))
                   {
                      details::free_node(*expr_gen.node_allocator_, branch[0]);
                      details::free_node(*expr_gen.node_allocator_, branch[1]);
 
                      return expr_gen(T(0));
                   }
-                  else if (std::equal_to<T>()(T(0),c) && (details::e_add == operation))
+                  else if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_add == operation))
                   {
                      details::free_node(*expr_gen.node_allocator_, branch[0]);
 
                      return branch[1];
                   }
-                  else if (std::equal_to<T>()(T(1),c) && (details::e_mul == operation))
+                  else if (std::equal_to<T>()(T(1),c) && (details::operator_type::e_mul == operation))
                   {
                      details::free_node(*expr_gen.node_allocator_, branch[0]);
 
                      return branch[1];
                   }
 
-                  if (details::e_add == cobnode->operation())
+                  if (details::operator_type::e_add == cobnode->operation())
                   {
-                     if (details::e_add == operation)
+                     if (details::operator_type::e_add == operation)
                      {
                         cobnode->set_c(c + cobnode->c());
                         result = cobnode;
                      }
-                     else if (details::e_sub == operation)
+                     else if (details::operator_type::e_sub == operation)
                      {
                         result = expr_gen.node_allocator_->
                                     template allocate_tt<typename details::cob_node<Type,details::sub_op<Type> > >
@@ -35841,14 +35837,14 @@ namespace exprtk
                         details::free_node(*expr_gen.node_allocator_,branch[1]);
                      }
                   }
-                  else if (details::e_sub == cobnode->operation())
+                  else if (details::operator_type::e_sub == cobnode->operation())
                   {
-                     if (details::e_add == operation)
+                     if (details::operator_type::e_add == operation)
                      {
                         cobnode->set_c(c + cobnode->c());
                         result = cobnode;
                      }
-                     else if (details::e_sub == operation)
+                     else if (details::operator_type::e_sub == operation)
                      {
                         result = expr_gen.node_allocator_->
                                     template allocate_tt<typename details::cob_node<Type,details::add_op<Type> > >
@@ -35857,14 +35853,14 @@ namespace exprtk
                         details::free_node(*expr_gen.node_allocator_,branch[1]);
                      }
                   }
-                  else if (details::e_mul == cobnode->operation())
+                  else if (details::operator_type::e_mul == cobnode->operation())
                   {
-                     if (details::e_mul == operation)
+                     if (details::operator_type::e_mul == operation)
                      {
                         cobnode->set_c(c * cobnode->c());
                         result = cobnode;
                      }
-                     else if (details::e_div == operation)
+                     else if (details::operator_type::e_div == operation)
                      {
                         result = expr_gen.node_allocator_->
                                     template allocate_tt<typename details::cob_node<Type,details::div_op<Type> > >
@@ -35873,14 +35869,14 @@ namespace exprtk
                         details::free_node(*expr_gen.node_allocator_,branch[1]);
                      }
                   }
-                  else if (details::e_div == cobnode->operation())
+                  else if (details::operator_type::e_div == cobnode->operation())
                   {
-                     if (details::e_mul == operation)
+                     if (details::operator_type::e_mul == operation)
                      {
                         cobnode->set_c(c * cobnode->c());
                         result = cobnode;
                      }
-                     else if (details::e_div == operation)
+                     else if (details::operator_type::e_div == operation)
                      {
                         result = expr_gen.node_allocator_->
                                     template allocate_tt<typename details::cob_node<Type,details::mul_op<Type> > >
@@ -35915,31 +35911,31 @@ namespace exprtk
 
                   const Type c = static_cast<details::literal_node<Type>*>(branch[1])->value();
 
-                  if (details::e_add == bocnode->operation())
+                  if (details::operator_type::e_add == bocnode->operation())
                   {
                      switch (operation)
                      {
-                        case details::e_add : bocnode->set_c(bocnode->c() + c); break;
-                        case details::e_sub : bocnode->set_c(bocnode->c() - c); break;
+                        case details::operator_type::e_add : bocnode->set_c(bocnode->c() + c); break;
+                        case details::operator_type::e_sub : bocnode->set_c(bocnode->c() - c); break;
                         default             : return error_node();
                      }
 
                      result = bocnode;
                   }
-                  else if (details::e_mul == bocnode->operation())
+                  else if (details::operator_type::e_mul == bocnode->operation())
                   {
                      switch (operation)
                      {
-                        case details::e_mul : bocnode->set_c(bocnode->c() * c); break;
-                        case details::e_div : bocnode->set_c(bocnode->c() / c); break;
+                        case details::operator_type::e_mul : bocnode->set_c(bocnode->c() * c); break;
+                        case details::operator_type::e_div : bocnode->set_c(bocnode->c() / c); break;
                         default             : return error_node();
                      }
 
                      result = bocnode;
                   }
-                  else if (details::e_sub == bocnode->operation())
+                  else if (details::operator_type::e_sub == bocnode->operation())
                   {
-                     if (details::e_add == operation)
+                     if (details::operator_type::e_add == operation)
                      {
                         result = expr_gen.node_allocator_->
                                     template allocate_tt<typename details::boc_node<Type,details::add_op<Type> > >
@@ -35947,18 +35943,18 @@ namespace exprtk
 
                         details::free_node(*expr_gen.node_allocator_,branch[0]);
                      }
-                     else if (details::e_sub == operation)
+                     else if (details::operator_type::e_sub == operation)
                      {
                         bocnode->set_c(bocnode->c() + c);
                         result = bocnode;
                      }
                   }
-                  else if (details::e_div == bocnode->operation())
+                  else if (details::operator_type::e_div == bocnode->operation())
                   {
                      switch (operation)
                      {
-                        case details::e_div : bocnode->set_c(bocnode->c() * c); break;
-                        case details::e_mul : bocnode->set_c(bocnode->c() / c); break;
+                        case details::operator_type::e_div : bocnode->set_c(bocnode->c() * c); break;
+                        case details::operator_type::e_mul : bocnode->set_c(bocnode->c() / c); break;
                         default             : return error_node();
                      }
 
@@ -35978,14 +35974,14 @@ namespace exprtk
 
                   const Type c = static_cast<details::literal_node<Type>*>(branch[0])->value();
 
-                  if (details::e_add == bocnode->operation())
+                  if (details::operator_type::e_add == bocnode->operation())
                   {
-                     if (details::e_add == operation)
+                     if (details::operator_type::e_add == operation)
                      {
                         bocnode->set_c(c + bocnode->c());
                         result = bocnode;
                      }
-                     else if (details::e_sub == operation)
+                     else if (details::operator_type::e_sub == operation)
                      {
                         result = expr_gen.node_allocator_->
                                     template allocate_tt<typename details::cob_node<Type,details::sub_op<Type> > >
@@ -35994,9 +35990,9 @@ namespace exprtk
                         details::free_node(*expr_gen.node_allocator_,branch[1]);
                      }
                   }
-                  else if (details::e_sub == bocnode->operation())
+                  else if (details::operator_type::e_sub == bocnode->operation())
                   {
-                     if (details::e_add == operation)
+                     if (details::operator_type::e_add == operation)
                      {
                         result = expr_gen.node_allocator_->
                                     template allocate_tt<typename details::boc_node<Type,details::add_op<Type> > >
@@ -36004,7 +36000,7 @@ namespace exprtk
 
                         details::free_node(*expr_gen.node_allocator_,branch[1]);
                      }
-                     else if (details::e_sub == operation)
+                     else if (details::operator_type::e_sub == operation)
                      {
                         result = expr_gen.node_allocator_->
                                     template allocate_tt<typename details::cob_node<Type,details::sub_op<Type> > >
@@ -36013,14 +36009,14 @@ namespace exprtk
                         details::free_node(*expr_gen.node_allocator_,branch[1]);
                      }
                   }
-                  else if (details::e_mul == bocnode->operation())
+                  else if (details::operator_type::e_mul == bocnode->operation())
                   {
-                     if (details::e_mul == operation)
+                     if (details::operator_type::e_mul == operation)
                      {
                         bocnode->set_c(c * bocnode->c());
                         result = bocnode;
                      }
-                     else if (details::e_div == operation)
+                     else if (details::operator_type::e_div == operation)
                      {
                         result = expr_gen.node_allocator_->
                                     template allocate_tt<typename details::cob_node<Type,details::div_op<Type> > >
@@ -36029,14 +36025,14 @@ namespace exprtk
                         details::free_node(*expr_gen.node_allocator_,branch[1]);
                      }
                   }
-                  else if (details::e_div == bocnode->operation())
+                  else if (details::operator_type::e_div == bocnode->operation())
                   {
-                     if (details::e_mul == operation)
+                     if (details::operator_type::e_mul == operation)
                      {
                         bocnode->set_c(bocnode->c() / c);
                         result = bocnode;
                      }
-                     else if (details::e_div == operation)
+                     else if (details::operator_type::e_div == operation)
                      {
                         result = expr_gen.node_allocator_->
                                     template allocate_tt<typename details::cob_node<Type,details::div_op<Type> > >
@@ -36115,13 +36111,13 @@ namespace exprtk
 
                details::free_node(*(expr_gen.node_allocator_),branch[0]);
 
-               if (std::equal_to<T>()(T(0),c) && (details::e_mul == operation))
+               if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_mul == operation))
                   return expr_gen(T(0));
-               else if (std::equal_to<T>()(T(0),c) && (details::e_div == operation))
+               else if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_div == operation))
                   return expr_gen(T(0));
-               else if (std::equal_to<T>()(T(0),c) && (details::e_add == operation))
+               else if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_add == operation))
                   return static_cast<details::variable_node<Type>*>(branch[1]);
-               else if (std::equal_to<T>()(T(1),c) && (details::e_mul == operation))
+               else if (std::equal_to<T>()(T(1),c) && (details::operator_type::e_mul == operation))
                   return static_cast<details::variable_node<Type>*>(branch[1]);
 
                switch (operation)
@@ -36157,15 +36153,15 @@ namespace exprtk
                   else
                      return expr_gen.cardinal_pow_optimisation(v,c);
                }
-               else if (std::equal_to<T>()(T(0),c) && (details::e_mul == operation))
+               else if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_mul == operation))
                   return expr_gen(T(0));
-               else if (std::equal_to<T>()(T(0),c) && (details::e_div == operation))
+               else if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_div == operation))
                   return expr_gen(std::numeric_limits<T>::quiet_NaN());
-               else if (std::equal_to<T>()(T(0),c) && (details::e_add == operation))
+               else if (std::equal_to<T>()(T(0),c) && (details::operator_type::e_add == operation))
                   return static_cast<details::variable_node<Type>*>(branch[0]);
-               else if (std::equal_to<T>()(T(1),c) && (details::e_mul == operation))
+               else if (std::equal_to<T>()(T(1),c) && (details::operator_type::e_mul == operation))
                   return static_cast<details::variable_node<Type>*>(branch[0]);
-               else if (std::equal_to<T>()(T(1),c) && (details::e_div == operation))
+               else if (std::equal_to<T>()(T(1),c) && (details::operator_type::e_div == operation))
                   return static_cast<details::variable_node<Type>*>(branch[0]);
 
                switch (operation)
@@ -36193,7 +36189,7 @@ namespace exprtk
                switch (sf3opr)
                {
                   #define case_stmt(op)                                                                              \
-                  case details::e_sf##op : return details::T0oT1oT2_sf3ext<T,T0,T1,T2,details::sf##op##_op<Type> >:: \
+                  case details::operator_type::e_sf##op : return details::T0oT1oT2_sf3ext<T,T0,T1,T2,details::sf##op##_op<Type> >:: \
                                 allocate(*(expr_gen.node_allocator_), t0, t1, t2);                                   \
 
                   case_stmt(00) case_stmt(01) case_stmt(02) case_stmt(03)
@@ -36236,11 +36232,11 @@ namespace exprtk
                switch (sf4opr)
                {
                   #define case_stmt0(op)                                                                                      \
-                  case details::e_sf##op : return details::T0oT1oT2oT3_sf4ext<Type,T0,T1,T2,T3,details::sf##op##_op<Type> >:: \
+                  case details::operator_type::e_sf##op : return details::T0oT1oT2oT3_sf4ext<Type,T0,T1,T2,T3,details::sf##op##_op<Type> >:: \
                                 allocate(*(expr_gen.node_allocator_), t0, t1, t2, t3);                                        \
 
                   #define case_stmt1(op)                                                                                             \
-                  case details::e_sf4ext##op : return details::T0oT1oT2oT3_sf4ext<Type,T0,T1,T2,T3,details::sfext##op##_op<Type> >:: \
+                  case details::operator_type::e_sf4ext##op : return details::T0oT1oT2oT3_sf4ext<Type,T0,T1,T2,T3,details::sfext##op##_op<Type> >:: \
                                 allocate(*(expr_gen.node_allocator_), t0, t1, t2, t3);                                               \
 
                   case_stmt0(48) case_stmt0(49) case_stmt0(50) case_stmt0(51)
@@ -36310,23 +36306,23 @@ namespace exprtk
 
                switch (n->type())
                {
-                  case details::expression_node<Type>::e_covoc : return compile_right_impl
+                  case details::expression_node<Type>::node_type::e_covoc : return compile_right_impl
                                                                     <typename covoc_t::sf3_type_node,ExternalType, ctype, vtype, ctype>
                                                                        (expr_gen, id, t, sf3node, result);
 
-                  case details::expression_node<Type>::e_covov : return compile_right_impl
+                  case details::expression_node<Type>::node_type::e_covov : return compile_right_impl
                                                                     <typename covov_t::sf3_type_node,ExternalType, ctype, vtype, vtype>
                                                                        (expr_gen, id, t, sf3node, result);
 
-                  case details::expression_node<Type>::e_vocov : return compile_right_impl
+                  case details::expression_node<Type>::node_type::e_vocov : return compile_right_impl
                                                                     <typename vocov_t::sf3_type_node,ExternalType, vtype, ctype, vtype>
                                                                        (expr_gen, id, t, sf3node, result);
 
-                  case details::expression_node<Type>::e_vovoc : return compile_right_impl
+                  case details::expression_node<Type>::node_type::e_vovoc : return compile_right_impl
                                                                     <typename vovoc_t::sf3_type_node,ExternalType, vtype, vtype, ctype>
                                                                        (expr_gen, id, t, sf3node, result);
 
-                  case details::expression_node<Type>::e_vovov : return compile_right_impl
+                  case details::expression_node<Type>::node_type::e_vovov : return compile_right_impl
                                                                     <typename vovov_t::sf3_type_node,ExternalType, vtype, vtype, vtype>
                                                                        (expr_gen, id, t, sf3node, result);
 
@@ -36353,23 +36349,23 @@ namespace exprtk
 
                switch (n->type())
                {
-                  case details::expression_node<Type>::e_covoc : return compile_left_impl
+                  case details::expression_node<Type>::node_type::e_covoc : return compile_left_impl
                                                                     <typename covoc_t::sf3_type_node,ExternalType, ctype, vtype, ctype>
                                                                        (expr_gen, id, t, sf3node, result);
 
-                  case details::expression_node<Type>::e_covov : return compile_left_impl
+                  case details::expression_node<Type>::node_type::e_covov : return compile_left_impl
                                                                     <typename covov_t::sf3_type_node,ExternalType, ctype, vtype, vtype>
                                                                        (expr_gen, id, t, sf3node, result);
 
-                  case details::expression_node<Type>::e_vocov : return compile_left_impl
+                  case details::expression_node<Type>::node_type::e_vocov : return compile_left_impl
                                                                     <typename vocov_t::sf3_type_node,ExternalType, vtype, ctype, vtype>
                                                                        (expr_gen, id, t, sf3node, result);
 
-                  case details::expression_node<Type>::e_vovoc : return compile_left_impl
+                  case details::expression_node<Type>::node_type::e_vovoc : return compile_left_impl
                                                                     <typename vovoc_t::sf3_type_node,ExternalType, vtype, vtype, ctype>
                                                                        (expr_gen, id, t, sf3node, result);
 
-                  case details::expression_node<Type>::e_vovov : return compile_left_impl
+                  case details::expression_node<Type>::node_type::e_vovov : return compile_left_impl
                                                                     <typename vovov_t::sf3_type_node,ExternalType, vtype, vtype, vtype>
                                                                        (expr_gen, id, t, sf3node, result);
 
@@ -36446,7 +36442,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (v0 / v1) / v2 --> (vovov) v0 / (v1 * v2)
-                  if ((details::e_div == o0) && (details::e_div == o1))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -36511,7 +36507,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // v0 / (v1 / v2) --> (vovov) (v0 * v2) / v1
-                  if ((details::e_div == o0) && (details::e_div == o1))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -36577,7 +36573,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (v0 / v1) / c --> (vovoc) v0 / (v1 * c)
-                  if ((details::e_div == o0) && (details::e_div == o1))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -36642,7 +36638,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // v0 / (v1 / c) --> (vocov) (v0 * c) / v1
-                  if ((details::e_div == o0) && (details::e_div == o1))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -36707,7 +36703,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (v0 / c) / v1 --> (vovoc) v0 / (v1 * c)
-                  if ((details::e_div == o0) && (details::e_div == o1))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -36772,7 +36768,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // v0 / (c / v1) --> (vovoc) (v0 * v1) / c
-                  if ((details::e_div == o0) && (details::e_div == o1))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -36837,7 +36833,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (c / v0) / v1 --> (covov) c / (v0 * v1)
-                  if ((details::e_div == o0) && (details::e_div == o1))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -36903,7 +36899,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // c / (v0 / v1) --> (covov) (c * v1) / v0
-                  if ((details::e_div == o0) && (details::e_div == o1))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -36969,7 +36965,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (c0 + v) + c1 --> (cov) (c0 + c1) + v
-                  if ((details::e_add == o0) && (details::e_add == o1))
+                  if ((details::operator_type::e_add == o0) && (details::operator_type::e_add == o1))
                   {
                      exprtk_debug(("(c0 + v) + c1 --> (cov) (c0 + c1) + v\n"));
 
@@ -36977,7 +36973,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::add_op<Type> > >(c0 + c1, v);
                   }
                   // (c0 + v) - c1 --> (cov) (c0 - c1) + v
-                  else if ((details::e_add == o0) && (details::e_sub == o1))
+                  else if ((details::operator_type::e_add == o0) && (details::operator_type::e_sub == o1))
                   {
                      exprtk_debug(("(c0 + v) - c1 --> (cov) (c0 - c1) + v\n"));
 
@@ -36985,7 +36981,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::add_op<Type> > >(c0 - c1, v);
                   }
                   // (c0 - v) + c1 --> (cov) (c0 + c1) - v
-                  else if ((details::e_sub == o0) && (details::e_add == o1))
+                  else if ((details::operator_type::e_sub == o0) && (details::operator_type::e_add == o1))
                   {
                      exprtk_debug(("(c0 - v) + c1 --> (cov) (c0 + c1) - v\n"));
 
@@ -36993,7 +36989,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::sub_op<Type> > >(c0 + c1, v);
                   }
                   // (c0 - v) - c1 --> (cov) (c0 - c1) - v
-                  else if ((details::e_sub == o0) && (details::e_sub == o1))
+                  else if ((details::operator_type::e_sub == o0) && (details::operator_type::e_sub == o1))
                   {
                      exprtk_debug(("(c0 - v) - c1 --> (cov) (c0 - c1) - v\n"));
 
@@ -37001,7 +36997,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::sub_op<Type> > >(c0 - c1, v);
                   }
                   // (c0 * v) * c1 --> (cov) (c0 * c1) * v
-                  else if ((details::e_mul == o0) && (details::e_mul == o1))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_mul == o1))
                   {
                      exprtk_debug(("(c0 * v) * c1 --> (cov) (c0 * c1) * v\n"));
 
@@ -37009,7 +37005,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::mul_op<Type> > >(c0 * c1, v);
                   }
                   // (c0 * v) / c1 --> (cov) (c0 / c1) * v
-                  else if ((details::e_mul == o0) && (details::e_div == o1))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_div == o1))
                   {
                      exprtk_debug(("(c0 * v) / c1 --> (cov) (c0 / c1) * v\n"));
 
@@ -37017,7 +37013,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::mul_op<Type> > >(c0 / c1, v);
                   }
                   // (c0 / v) * c1 --> (cov) (c0 * c1) / v
-                  else if ((details::e_div == o0) && (details::e_mul == o1))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_mul == o1))
                   {
                      exprtk_debug(("(c0 / v) * c1 --> (cov) (c0 * c1) / v\n"));
 
@@ -37025,7 +37021,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::div_op<Type> > >(c0 * c1, v);
                   }
                   // (c0 / v) / c1 --> (cov) (c0 / c1) / v
-                  else if ((details::e_div == o0) && (details::e_div == o1))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1))
                   {
                      exprtk_debug(("(c0 / v) / c1 --> (cov) (c0 / c1) / v\n"));
 
@@ -37088,7 +37084,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (c0) + (v + c1) --> (cov) (c0 + c1) + v
-                  if ((details::e_add == o0) && (details::e_add == o1))
+                  if ((details::operator_type::e_add == o0) && (details::operator_type::e_add == o1))
                   {
                      exprtk_debug(("(c0) + (v + c1) --> (cov) (c0 + c1) + v\n"));
 
@@ -37096,7 +37092,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::add_op<Type> > >(c0 + c1, v);
                   }
                   // (c0) + (v - c1) --> (cov) (c0 - c1) + v
-                  else if ((details::e_add == o0) && (details::e_sub == o1))
+                  else if ((details::operator_type::e_add == o0) && (details::operator_type::e_sub == o1))
                   {
                      exprtk_debug(("(c0) + (v - c1) --> (cov) (c0 - c1) + v\n"));
 
@@ -37104,7 +37100,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::add_op<Type> > >(c0 - c1, v);
                   }
                   // (c0) - (v + c1) --> (cov) (c0 - c1) - v
-                  else if ((details::e_sub == o0) && (details::e_add == o1))
+                  else if ((details::operator_type::e_sub == o0) && (details::operator_type::e_add == o1))
                   {
                      exprtk_debug(("(c0) - (v + c1) --> (cov) (c0 - c1) - v\n"));
 
@@ -37112,7 +37108,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::sub_op<Type> > >(c0 - c1, v);
                   }
                   // (c0) - (v - c1) --> (cov) (c0 + c1) - v
-                  else if ((details::e_sub == o0) && (details::e_sub == o1))
+                  else if ((details::operator_type::e_sub == o0) && (details::operator_type::e_sub == o1))
                   {
                      exprtk_debug(("(c0) - (v - c1) --> (cov) (c0 + c1) - v\n"));
 
@@ -37120,7 +37116,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::sub_op<Type> > >(c0 + c1, v);
                   }
                   // (c0) * (v * c1) --> (voc) v * (c0 * c1)
-                  else if ((details::e_mul == o0) && (details::e_mul == o1))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_mul == o1))
                   {
                      exprtk_debug(("(c0) * (v * c1) --> (voc) v * (c0 * c1)\n"));
 
@@ -37128,7 +37124,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::mul_op<Type> > >(c0 * c1, v);
                   }
                   // (c0) * (v / c1) --> (cov) (c0 / c1) * v
-                  else if ((details::e_mul == o0) && (details::e_div == o1))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_div == o1))
                   {
                      exprtk_debug(("(c0) * (v / c1) --> (cov) (c0 / c1) * v\n"));
 
@@ -37136,7 +37132,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::mul_op<Type> > >(c0 / c1, v);
                   }
                   // (c0) / (v * c1) --> (cov) (c0 / c1) / v
-                  else if ((details::e_div == o0) && (details::e_mul == o1))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_mul == o1))
                   {
                      exprtk_debug(("(c0) / (v * c1) --> (cov) (c0 / c1) / v\n"));
 
@@ -37144,7 +37140,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::div_op<Type> > >(c0 / c1, v);
                   }
                   // (c0) / (v / c1) --> (cov) (c0 * c1) / v
-                  else if ((details::e_div == o0) && (details::e_div == o1))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1))
                   {
                      exprtk_debug(("(c0) / (v / c1) --> (cov) (c0 * c1) / v\n"));
 
@@ -37219,7 +37215,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (c0) + (c1 + v) --> (cov) (c0 + c1) + v
-                  if ((details::e_add == o0) && (details::e_add == o1))
+                  if ((details::operator_type::e_add == o0) && (details::operator_type::e_add == o1))
                   {
                      exprtk_debug(("(c0) + (c1 + v) --> (cov) (c0 + c1) + v\n"));
 
@@ -37227,7 +37223,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::add_op<Type> > >(c0 + c1, v);
                   }
                   // (c0) + (c1 - v) --> (cov) (c0 + c1) - v
-                  else if ((details::e_add == o0) && (details::e_sub == o1))
+                  else if ((details::operator_type::e_add == o0) && (details::operator_type::e_sub == o1))
                   {
                      exprtk_debug(("(c0) + (c1 - v) --> (cov) (c0 + c1) - v\n"));
 
@@ -37235,7 +37231,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::sub_op<Type> > >(c0 + c1, v);
                   }
                   // (c0) - (c1 + v) --> (cov) (c0 - c1) - v
-                  else if ((details::e_sub == o0) && (details::e_add == o1))
+                  else if ((details::operator_type::e_sub == o0) && (details::operator_type::e_add == o1))
                   {
                      exprtk_debug(("(c0) - (c1 + v) --> (cov) (c0 - c1) - v\n"));
 
@@ -37243,7 +37239,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::sub_op<Type> > >(c0 - c1, v);
                   }
                   // (c0) - (c1 - v) --> (cov) (c0 - c1) + v
-                  else if ((details::e_sub == o0) && (details::e_sub == o1))
+                  else if ((details::operator_type::e_sub == o0) && (details::operator_type::e_sub == o1))
                   {
                      exprtk_debug(("(c0) - (c1 - v) --> (cov) (c0 - c1) + v\n"));
 
@@ -37251,7 +37247,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::add_op<Type> > >(c0 - c1, v);
                   }
                   // (c0) * (c1 * v) --> (cov) (c0 * c1) * v
-                  else if ((details::e_mul == o0) && (details::e_mul == o1))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_mul == o1))
                   {
                      exprtk_debug(("(c0) * (c1 * v) --> (cov) (c0 * c1) * v\n"));
 
@@ -37259,7 +37255,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::mul_op<Type> > >(c0 * c1, v);
                   }
                   // (c0) * (c1 / v) --> (cov) (c0 * c1) / v
-                  else if ((details::e_mul == o0) && (details::e_div == o1))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_div == o1))
                   {
                      exprtk_debug(("(c0) * (c1 / v) --> (cov) (c0 * c1) / v\n"));
 
@@ -37267,7 +37263,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::div_op<Type> > >(c0 * c1, v);
                   }
                   // (c0) / (c1 * v) --> (cov) (c0 / c1) / v
-                  else if ((details::e_div == o0) && (details::e_mul == o1))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_mul == o1))
                   {
                      exprtk_debug(("(c0) / (c1 * v) --> (cov) (c0 / c1) / v\n"));
 
@@ -37275,7 +37271,7 @@ namespace exprtk
                                template allocate_cr<typename details::cov_node<Type,details::div_op<Type> > >(c0 / c1, v);
                   }
                   // (c0) / (c1 / v) --> (cov) (c0 / c1) * v
-                  else if ((details::e_div == o0) && (details::e_div == o1))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1))
                   {
                      exprtk_debug(("(c0) / (c1 / v) --> (cov) (c0 / c1) * v\n"));
 
@@ -37338,7 +37334,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (v + c0) + c1 --> (voc) v + (c0 + c1)
-                  if ((details::e_add == o0) && (details::e_add == o1))
+                  if ((details::operator_type::e_add == o0) && (details::operator_type::e_add == o1))
                   {
                      exprtk_debug(("(v + c0) + c1 --> (voc) v + (c0 + c1)\n"));
 
@@ -37346,7 +37342,7 @@ namespace exprtk
                                template allocate_rc<typename details::voc_node<Type,details::add_op<Type> > >(v, c0 + c1);
                   }
                   // (v + c0) - c1 --> (voc) v + (c0 - c1)
-                  else if ((details::e_add == o0) && (details::e_sub == o1))
+                  else if ((details::operator_type::e_add == o0) && (details::operator_type::e_sub == o1))
                   {
                      exprtk_debug(("(v + c0) - c1 --> (voc) v + (c0 - c1)\n"));
 
@@ -37354,7 +37350,7 @@ namespace exprtk
                                template allocate_rc<typename details::voc_node<Type,details::add_op<Type> > >(v, c0 - c1);
                   }
                   // (v - c0) + c1 --> (voc) v - (c0 + c1)
-                  else if ((details::e_sub == o0) && (details::e_add == o1))
+                  else if ((details::operator_type::e_sub == o0) && (details::operator_type::e_add == o1))
                   {
                      exprtk_debug(("(v - c0) + c1 --> (voc) v - (c0 + c1)\n"));
 
@@ -37362,7 +37358,7 @@ namespace exprtk
                                template allocate_rc<typename details::voc_node<Type,details::add_op<Type> > >(v, c1 - c0);
                   }
                   // (v - c0) - c1 --> (voc) v - (c0 + c1)
-                  else if ((details::e_sub == o0) && (details::e_sub == o1))
+                  else if ((details::operator_type::e_sub == o0) && (details::operator_type::e_sub == o1))
                   {
                      exprtk_debug(("(v - c0) - c1 --> (voc) v - (c0 + c1)\n"));
 
@@ -37370,7 +37366,7 @@ namespace exprtk
                                template allocate_rc<typename details::voc_node<Type,details::sub_op<Type> > >(v, c0 + c1);
                   }
                   // (v * c0) * c1 --> (voc) v * (c0 * c1)
-                  else if ((details::e_mul == o0) && (details::e_mul == o1))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_mul == o1))
                   {
                      exprtk_debug(("(v * c0) * c1 --> (voc) v * (c0 * c1)\n"));
 
@@ -37378,7 +37374,7 @@ namespace exprtk
                                template allocate_rc<typename details::voc_node<Type,details::mul_op<Type> > >(v, c0 * c1);
                   }
                   // (v * c0) / c1 --> (voc) v * (c0 / c1)
-                  else if ((details::e_mul == o0) && (details::e_div == o1))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_div == o1))
                   {
                      exprtk_debug(("(v * c0) / c1 --> (voc) v * (c0 / c1)\n"));
 
@@ -37386,7 +37382,7 @@ namespace exprtk
                                template allocate_rc<typename details::voc_node<Type,details::mul_op<Type> > >(v, c0 / c1);
                   }
                   // (v / c0) * c1 --> (voc) v * (c1 / c0)
-                  else if ((details::e_div == o0) && (details::e_mul == o1))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_mul == o1))
                   {
                      exprtk_debug(("(v / c0) * c1 --> (voc) v * (c1 / c0)\n"));
 
@@ -37394,7 +37390,7 @@ namespace exprtk
                                template allocate_rc<typename details::voc_node<Type,details::mul_op<Type> > >(v, c1 / c0);
                   }
                   // (v / c0) / c1 --> (voc) v / (c0 * c1)
-                  else if ((details::e_div == o0) && (details::e_div == o1))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1))
                   {
                      exprtk_debug(("(v / c0) / c1 --> (voc) v / (c0 * c1)\n"));
 
@@ -37402,7 +37398,7 @@ namespace exprtk
                                template allocate_rc<typename details::voc_node<Type,details::div_op<Type> > >(v, c0 * c1);
                   }
                   // (v ^ c0) ^ c1 --> (voc) v ^ (c0 * c1)
-                  else if ((details::e_pow == o0) && (details::e_pow == o1))
+                  else if ((details::operator_type::e_pow == o0) && (details::operator_type::e_pow == o1))
                   {
                      exprtk_debug(("(v ^ c0) ^ c1 --> (voc) v ^ (c0 * c1)\n"));
 
@@ -37486,7 +37482,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (v0 / v1) * (v2 / v3) --> (vovovov) (v0 * v2) / (v1 * v3)
-                  if ((details::e_div == o0) && (details::e_mul == o1) && (details::e_div == o2))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_mul == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf4ext_expression::
@@ -37497,7 +37493,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 / v1) / (v2 / v3) --> (vovovov) (v0 * v3) / (v1 * v2)
-                  else if ((details::e_div == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf4ext_expression::
@@ -37508,7 +37504,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 + v1) / (v2 / v3) --> (vovovov) (v0 + v1) * (v3 / v2)
-                  else if ((details::e_add == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_add == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf4ext_expression::
@@ -37519,7 +37515,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 - v1) / (v2 / v3) --> (vovovov) (v0 + v1) * (v3 / v2)
-                  else if ((details::e_sub == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_sub == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf4ext_expression::
@@ -37530,7 +37526,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 * v1) / (v2 / v3) --> (vovovov) ((v0 * v1) * v3) / v2
-                  else if ((details::e_mul == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf4ext_expression::
@@ -37608,7 +37604,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (v0 / v1) * (v2 / c) --> (vovovoc) (v0 * v2) / (v1 * c)
-                  if ((details::e_div == o0) && (details::e_mul == o1) && (details::e_div == o2))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_mul == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf4ext_expression::
@@ -37619,7 +37615,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 / v1) / (v2 / c) --> (vocovov) (v0 * c) / (v1 * v2)
-                  if ((details::e_div == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf4ext_expression::
@@ -37697,7 +37693,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (v0 / v1) * (c / v2) --> (vocovov) (v0 * c) / (v1 * v2)
-                  if ((details::e_div == o0) && (details::e_mul == o1) && (details::e_div == o2))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_mul == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf4ext_expression::
@@ -37708,7 +37704,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 / v1) / (c / v2) --> (vovovoc) (v0 * v2) / (v1 * c)
-                  if ((details::e_div == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf4ext_expression::
@@ -37786,7 +37782,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (v0 / c) * (v1 / v2) --> (vovocov) (v0 * v1) / (c * v2)
-                  if ((details::e_div == o0) && (details::e_mul == o1) && (details::e_div == o2))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_mul == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf4ext_expression::
@@ -37797,7 +37793,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 / c) / (v1 / v2) --> (vovocov) (v0 * v2) / (c * v1)
-                  if ((details::e_div == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf4ext_expression::
@@ -37875,7 +37871,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (c / v0) * (v1 / v2) --> (covovov) (c * v1) / (v0 * v2)
-                  if ((details::e_div == o0) && (details::e_mul == o1) && (details::e_div == o2))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_mul == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf4ext_expression::
@@ -37886,7 +37882,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c / v0) / (v1 / v2) --> (covovov) (c * v2) / (v0 * v1)
-                  if ((details::e_div == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf4ext_expression::
@@ -37964,7 +37960,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (c0 + v0) + (c1 + v1) --> (covov) (c0 + c1) + v0 + v1
-                  if ((details::e_add == o0) && (details::e_add == o1) && (details::e_add == o2))
+                  if ((details::operator_type::e_add == o0) && (details::operator_type::e_add == o1) && (details::operator_type::e_add == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -37975,7 +37971,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 + v0) - (c1 + v1) --> (covov) (c0 - c1) + v0 - v1
-                  else if ((details::e_add == o0) && (details::e_sub == o1) && (details::e_add == o2))
+                  else if ((details::operator_type::e_add == o0) && (details::operator_type::e_sub == o1) && (details::operator_type::e_add == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -37986,7 +37982,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 - v0) - (c1 - v1) --> (covov) (c0 - c1) - v0 + v1
-                  else if ((details::e_sub == o0) && (details::e_sub == o1) && (details::e_sub == o2))
+                  else if ((details::operator_type::e_sub == o0) && (details::operator_type::e_sub == o1) && (details::operator_type::e_sub == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -37997,7 +37993,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 * v0) * (c1 * v1) --> (covov) (c0 * c1) * v0 * v1
-                  else if ((details::e_mul == o0) && (details::e_mul == o1) && (details::e_mul == o2))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_mul == o1) && (details::operator_type::e_mul == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38008,7 +38004,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 * v0) / (c1 * v1) --> (covov) (c0 / c1) * (v0 / v1)
-                  else if ((details::e_mul == o0) && (details::e_div == o1) && (details::e_mul == o2))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_mul == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38019,7 +38015,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 / v0) * (c1 / v1) --> (covov) (c0 * c1) / (v0 * v1)
-                  else if ((details::e_div == o0) && (details::e_mul == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_mul == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38030,7 +38026,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 / v0) / (c1 / v1) --> (covov) ((c0 / c1) * v1) / v0
-                  else if ((details::e_div == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38041,7 +38037,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 * v0) / (c1 / v1) --> (covov) (c0 / c1) * (v0 * v1)
-                  else if ((details::e_mul == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38052,7 +38048,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 / v0) / (c1 * v1) --> (covov) (c0 / c1) / (v0 * v1)
-                  else if ((details::e_div == o0) && (details::e_div == o1) && (details::e_mul == o2))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_mul == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38065,11 +38061,11 @@ namespace exprtk
                   // (c * v0) +/- (c * v1) --> (covov) c * (v0 +/- v1)
                   else if (
                             (std::equal_to<T>()(c0,c1)) &&
-                            (details::e_mul == o0)      &&
-                            (details::e_mul == o2)      &&
+                            (details::operator_type::e_mul == o0)      &&
+                            (details::operator_type::e_mul == o2)      &&
                             (
-                              (details::e_add == o1) ||
-                              (details::e_sub == o1)
+                              (details::operator_type::e_add == o1) ||
+                              (details::operator_type::e_sub == o1)
                             )
                           )
                   {
@@ -38077,8 +38073,8 @@ namespace exprtk
 
                      switch (o1)
                      {
-                        case details::e_add : specfunc = "t*(t+t)"; break;
-                        case details::e_sub : specfunc = "t*(t-t)"; break;
+                        case details::operator_type::e_add : specfunc = "t*(t+t)"; break;
+                        case details::operator_type::e_sub : specfunc = "t*(t-t)"; break;
                         default             : return error_node();
                      }
 
@@ -38158,7 +38154,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (v0 + c0) + (v1 + c1) --> (covov) (c0 + c1) + v0 + v1
-                  if ((details::e_add == o0) && (details::e_add == o1) && (details::e_add == o2))
+                  if ((details::operator_type::e_add == o0) && (details::operator_type::e_add == o1) && (details::operator_type::e_add == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38169,7 +38165,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 + c0) - (v1 + c1) --> (covov) (c0 - c1) + v0 - v1
-                  else if ((details::e_add == o0) && (details::e_sub == o1) && (details::e_add == o2))
+                  else if ((details::operator_type::e_add == o0) && (details::operator_type::e_sub == o1) && (details::operator_type::e_add == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38180,7 +38176,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 - c0) - (v1 - c1) --> (covov) (c1 - c0) + v0 - v1
-                  else if ((details::e_sub == o0) && (details::e_sub == o1) && (details::e_sub == o2))
+                  else if ((details::operator_type::e_sub == o0) && (details::operator_type::e_sub == o1) && (details::operator_type::e_sub == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38191,7 +38187,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 * c0) * (v1 * c1) --> (covov) (c0 * c1) * v0 * v1
-                  else if ((details::e_mul == o0) && (details::e_mul == o1) && (details::e_mul == o2))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_mul == o1) && (details::operator_type::e_mul == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38202,7 +38198,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 * c0) / (v1 * c1) --> (covov) (c0 / c1) * (v0 / v1)
-                  else if ((details::e_mul == o0) && (details::e_div == o1) && (details::e_mul == o2))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_mul == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38213,7 +38209,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 / c0) * (v1 / c1) --> (covov) (1 / (c0 * c1)) * v0 * v1
-                  else if ((details::e_div == o0) && (details::e_mul == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_mul == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38224,7 +38220,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 / c0) / (v1 / c1) --> (covov) ((c1 / c0) * v0) / v1
-                  else if ((details::e_div == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38235,7 +38231,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 * c0) / (v1 / c1) --> (covov) (c0 * c1) * (v0 / v1)
-                  else if ((details::e_mul == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38246,7 +38242,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 / c0) / (v1 * c1) --> (covov) (1 / (c0 * c1)) * v0 / v1
-                  else if ((details::e_div == o0) && (details::e_div == o1) && (details::e_mul == o2))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_mul == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38257,7 +38253,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 / c0) * (v1 + c1) --> (vocovoc) (v0 * (1 / c0)) * (v1 + c1)
-                  else if ((details::e_div == o0) && (details::e_mul == o1) && (details::e_add == o2))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_mul == o1) && (details::operator_type::e_add == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf4ext_expression::
@@ -38268,7 +38264,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 / c0) * (v1 - c1) --> (vocovoc) (v0 * (1 / c0)) * (v1 - c1)
-                  else if ((details::e_div == o0) && (details::e_mul == o1) && (details::e_sub == o2))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_mul == o1) && (details::operator_type::e_sub == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf4ext_expression::
@@ -38281,11 +38277,11 @@ namespace exprtk
                   // (v0 * c) +/- (v1 * c) --> (covov) c * (v0 +/- v1)
                   else if (
                             (std::equal_to<T>()(c0,c1)) &&
-                            (details::e_mul == o0)      &&
-                            (details::e_mul == o2)      &&
+                            (details::operator_type::e_mul == o0)      &&
+                            (details::operator_type::e_mul == o2)      &&
                             (
-                              (details::e_add == o1) ||
-                              (details::e_sub == o1)
+                              (details::operator_type::e_add == o1) ||
+                              (details::operator_type::e_sub == o1)
                             )
                           )
                   {
@@ -38293,8 +38289,8 @@ namespace exprtk
 
                      switch (o1)
                      {
-                        case details::e_add : specfunc = "t*(t+t)"; break;
-                        case details::e_sub : specfunc = "t*(t-t)"; break;
+                        case details::operator_type::e_add : specfunc = "t*(t+t)"; break;
+                        case details::operator_type::e_sub : specfunc = "t*(t-t)"; break;
                         default             : return error_node();
                      }
 
@@ -38309,11 +38305,11 @@ namespace exprtk
                   // (v0 / c) +/- (v1 / c) --> (vovoc) (v0 +/- v1) / c
                   else if (
                             (std::equal_to<T>()(c0,c1)) &&
-                            (details::e_div == o0)      &&
-                            (details::e_div == o2)      &&
+                            (details::operator_type::e_div == o0)      &&
+                            (details::operator_type::e_div == o2)      &&
                             (
-                              (details::e_add == o1) ||
-                              (details::e_sub == o1)
+                              (details::operator_type::e_add == o1) ||
+                              (details::operator_type::e_sub == o1)
                             )
                           )
                   {
@@ -38321,8 +38317,8 @@ namespace exprtk
 
                      switch (o1)
                      {
-                        case details::e_add : specfunc = "(t+t)/t"; break;
-                        case details::e_sub : specfunc = "(t-t)/t"; break;
+                        case details::operator_type::e_add : specfunc = "(t+t)/t"; break;
+                        case details::operator_type::e_sub : specfunc = "(t-t)/t"; break;
                         default             : return error_node();
                      }
 
@@ -38402,7 +38398,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (c0 + v0) + (v1 + c1) --> (covov) (c0 + c1) + v0 + v1
-                  if ((details::e_add == o0) && (details::e_add == o1) && (details::e_add == o2))
+                  if ((details::operator_type::e_add == o0) && (details::operator_type::e_add == o1) && (details::operator_type::e_add == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38413,7 +38409,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 + v0) - (v1 + c1) --> (covov) (c0 - c1) + v0 - v1
-                  else if ((details::e_add == o0) && (details::e_sub == o1) && (details::e_add == o2))
+                  else if ((details::operator_type::e_add == o0) && (details::operator_type::e_sub == o1) && (details::operator_type::e_add == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38424,7 +38420,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 - v0) - (v1 - c1) --> (covov) (c0 + c1) - v0 - v1
-                  else if ((details::e_sub == o0) && (details::e_sub == o1) && (details::e_sub == o2))
+                  else if ((details::operator_type::e_sub == o0) && (details::operator_type::e_sub == o1) && (details::operator_type::e_sub == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38435,7 +38431,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 * v0) * (v1 * c1) --> (covov) (c0 * c1) * v0 * v1
-                  else if ((details::e_mul == o0) && (details::e_mul == o1) && (details::e_mul == o2))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_mul == o1) && (details::operator_type::e_mul == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38446,7 +38442,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 * v0) / (v1 * c1) --> (covov) (c0 / c1) * (v0 / v1)
-                  else if ((details::e_mul == o0) && (details::e_div == o1) && (details::e_mul == o2))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_mul == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38457,7 +38453,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 / v0) * (v1 / c1) --> (covov) (c0 / c1) * (v1 / v0)
-                  else if ((details::e_div == o0) && (details::e_mul == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_mul == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38468,7 +38464,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 / v0) / (v1 / c1) --> (covov) (c0 * c1) / (v0 * v1)
-                  else if ((details::e_div == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38479,7 +38475,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 * v0) / (v1 / c1) --> (covov) (c0 * c1) * (v0 / v1)
-                  else if ((details::e_mul == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38490,7 +38486,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (c0 / v0) / (v1 * c1) --> (covov) (c0 / c1) / (v0 * v1)
-                  else if ((details::e_div == o0) && (details::e_div == o1) && (details::e_mul == o2))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_mul == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38503,11 +38499,11 @@ namespace exprtk
                   // (c * v0) +/- (v1 * c) --> (covov) c * (v0 +/- v1)
                   else if (
                             (std::equal_to<T>()(c0,c1)) &&
-                            (details::e_mul == o0)      &&
-                            (details::e_mul == o2)      &&
+                            (details::operator_type::e_mul == o0)      &&
+                            (details::operator_type::e_mul == o2)      &&
                             (
-                              (details::e_add == o1) ||
-                              (details::e_sub == o1)
+                              (details::operator_type::e_add == o1) ||
+                              (details::operator_type::e_sub == o1)
                             )
                           )
                   {
@@ -38515,8 +38511,8 @@ namespace exprtk
 
                      switch (o1)
                      {
-                        case details::e_add : specfunc = "t*(t+t)"; break;
-                        case details::e_sub : specfunc = "t*(t-t)"; break;
+                        case details::operator_type::e_add : specfunc = "t*(t+t)"; break;
+                        case details::operator_type::e_sub : specfunc = "t*(t-t)"; break;
                         default             : return error_node();
                      }
 
@@ -38596,7 +38592,7 @@ namespace exprtk
                if (expr_gen.parser_->settings_.strength_reduction_enabled())
                {
                   // (v0 + c0) + (c1 + v1) --> (covov) (c0 + c1) + v0 + v1
-                  if ((details::e_add == o0) && (details::e_add == o1) && (details::e_add == o2))
+                  if ((details::operator_type::e_add == o0) && (details::operator_type::e_add == o1) && (details::operator_type::e_add == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38607,7 +38603,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 + c0) - (c1 + v1) --> (covov) (c0 - c1) + v0 - v1
-                  else if ((details::e_add == o0) && (details::e_sub == o1) && (details::e_add == o2))
+                  else if ((details::operator_type::e_add == o0) && (details::operator_type::e_sub == o1) && (details::operator_type::e_add == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38618,7 +38614,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 - c0) - (c1 - v1) --> (vovoc) v0 + v1 - (c1 + c0)
-                  else if ((details::e_sub == o0) && (details::e_sub == o1) && (details::e_sub == o2))
+                  else if ((details::operator_type::e_sub == o0) && (details::operator_type::e_sub == o1) && (details::operator_type::e_sub == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38629,7 +38625,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 * c0) * (c1 * v1) --> (covov) (c0 * c1) * v0 * v1
-                  else if ((details::e_mul == o0) && (details::e_mul == o1) && (details::e_mul == o2))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_mul == o1) && (details::operator_type::e_mul == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38640,7 +38636,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 * c0) / (c1 * v1) --> (covov) (c0 / c1) * (v0 * v1)
-                  else if ((details::e_mul == o0) && (details::e_div == o1) && (details::e_mul == o2))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_mul == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38651,7 +38647,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 / c0) * (c1 / v1) --> (covov) (c1 / c0) * (v0 / v1)
-                  else if ((details::e_div == o0) && (details::e_mul == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_mul == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38662,7 +38658,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 * c0) / (c1 / v1) --> (covov) (c0 / c1) * (v0 * v1)
-                  else if ((details::e_mul == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_mul == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38673,7 +38669,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 / c0) / (c1 * v1) --> (covov) (1 / (c0 * c1)) * (v0 / v1)
-                  else if ((details::e_div == o0) && (details::e_div == o1) && (details::e_mul == o2))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_mul == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38684,7 +38680,7 @@ namespace exprtk
                      return (synthesis_result) ? result : error_node();
                   }
                   // (v0 / c0) / (c1 / v1) --> (vovoc) (v0 * v1) * (1 / (c0 * c1))
-                  else if ((details::e_div == o0) && (details::e_div == o1) && (details::e_div == o2))
+                  else if ((details::operator_type::e_div == o0) && (details::operator_type::e_div == o1) && (details::operator_type::e_div == o2))
                   {
                      const bool synthesis_result =
                         synthesize_sf3ext_expression::
@@ -38697,10 +38693,10 @@ namespace exprtk
                   // (v0 * c) +/- (c * v1) --> (covov) c * (v0 +/- v1)
                   else if (
                             (std::equal_to<T>()(c0,c1)) &&
-                            (details::e_mul == o0)      &&
-                            (details::e_mul == o2)      &&
+                            (details::operator_type::e_mul == o0)      &&
+                            (details::operator_type::e_mul == o2)      &&
                             (
-                              (details::e_add == o1) || (details::e_sub == o1)
+                              (details::operator_type::e_add == o1) || (details::operator_type::e_sub == o1)
                             )
                           )
                   {
@@ -38708,8 +38704,8 @@ namespace exprtk
 
                      switch (o1)
                      {
-                        case details::e_add : specfunc = "t*(t+t)"; break;
-                        case details::e_sub : specfunc = "t*(t-t)"; break;
+                        case details::operator_type::e_add : specfunc = "t*(t+t)"; break;
+                        case details::operator_type::e_sub : specfunc = "t*(t-t)"; break;
                         default             : return error_node();
                      }
 
@@ -40871,14 +40867,14 @@ namespace exprtk
             expression_node_ptr result = error_node();
 
             if (
-                 (details::e_neg == o0) &&
-                 (details::e_neg == o1)
+                 (details::operator_type::e_neg == o0) &&
+                 (details::operator_type::e_neg == o1)
                )
             {
                switch (operation)
                {
                   // (-v0 + -v1) --> -(v0 + v1)
-                  case details::e_add : result = (*this)(details::e_neg,
+                  case details::operator_type::e_add : result = (*this)(details::operator_type::e_neg,
                                                     node_allocator_->
                                                        allocate_rr<typename details::
                                                           vov_node<Type,details::add_op<Type> > >(v0, v1));
@@ -40886,21 +40882,21 @@ namespace exprtk
                                         break;
 
                   // (-v0 - -v1) --> (v1 - v0)
-                  case details::e_sub : result = node_allocator_->
+                  case details::operator_type::e_sub : result = node_allocator_->
                                                     allocate_rr<typename details::
                                                        vov_node<Type,details::sub_op<Type> > >(v1, v0);
                                         exprtk_debug(("(-v0 - -v1) --> (v1 - v0)\n"));
                                         break;
 
                   // (-v0 * -v1) --> (v0 * v1)
-                  case details::e_mul : result = node_allocator_->
+                  case details::operator_type::e_mul : result = node_allocator_->
                                                     allocate_rr<typename details::
                                                        vov_node<Type,details::mul_op<Type> > >(v0, v1);
                                         exprtk_debug(("(-v0 * -v1) --> (v0 * v1)\n"));
                                         break;
 
                   // (-v0 / -v1) --> (v0 / v1)
-                  case details::e_div : result = node_allocator_->
+                  case details::operator_type::e_div : result = node_allocator_->
                                                     allocate_rr<typename details::
                                                        vov_node<Type,details::div_op<Type> > >(v0, v1);
                                         exprtk_debug(("(-v0 / -v1) --> (v0 / v1)\n"));
@@ -40927,15 +40923,15 @@ namespace exprtk
          #ifndef exprtk_disable_string_capabilities
 
          #define string_opr_switch_statements            \
-         case_stmt(details::e_lt    , details::lt_op   ) \
-         case_stmt(details::e_lte   , details::lte_op  ) \
-         case_stmt(details::e_gt    , details::gt_op   ) \
-         case_stmt(details::e_gte   , details::gte_op  ) \
-         case_stmt(details::e_eq    , details::eq_op   ) \
-         case_stmt(details::e_ne    , details::ne_op   ) \
-         case_stmt(details::e_in    , details::in_op   ) \
-         case_stmt(details::e_like  , details::like_op ) \
-         case_stmt(details::e_ilike , details::ilike_op) \
+         case_stmt(details::operator_type::e_lt    , details::lt_op   ) \
+         case_stmt(details::operator_type::e_lte   , details::lte_op  ) \
+         case_stmt(details::operator_type::e_gt    , details::gt_op   ) \
+         case_stmt(details::operator_type::e_gte   , details::gte_op  ) \
+         case_stmt(details::operator_type::e_eq    , details::eq_op   ) \
+         case_stmt(details::operator_type::e_ne    , details::ne_op   ) \
+         case_stmt(details::operator_type::e_in    , details::in_op   ) \
+         case_stmt(details::operator_type::e_like  , details::like_op ) \
+         case_stmt(details::operator_type::e_ilike , details::ilike_op) \
 
          template <typename T0, typename T1>
          inline expression_node_ptr synthesize_str_xrox_expression_impl(const details::operator_type& opr,
@@ -41140,13 +41136,13 @@ namespace exprtk
 
             expression_node_ptr result = error_node();
 
-            if (details::e_add == opr)
+            if (details::operator_type::e_add == opr)
                result = node_allocator_->allocate_c<details::string_literal_node<Type> >(s0 + s1);
-            else if (details::e_in == opr)
+            else if (details::operator_type::e_in == opr)
                result = node_allocator_->allocate_c<details::literal_node<Type> >(details::in_op   <Type>::process(s0,s1));
-            else if (details::e_like == opr)
+            else if (details::operator_type::e_like == opr)
                result = node_allocator_->allocate_c<details::literal_node<Type> >(details::like_op <Type>::process(s0,s1));
-            else if (details::e_ilike == opr)
+            else if (details::operator_type::e_ilike == opr)
                result = node_allocator_->allocate_c<details::literal_node<Type> >(details::ilike_op<Type>::process(s0,s1));
             else
             {
@@ -41289,7 +41285,7 @@ namespace exprtk
                                    details::is_string_ccondition_node (branch[1]) ||
                                    details::is_string_vararg_node     (branch[1]) ;
 
-            if (details::e_add == opr)
+            if (details::operator_type::e_add == opr)
             {
                if (!b0_is_cs || !b1_is_cs)
                {
@@ -41343,7 +41339,7 @@ namespace exprtk
          #ifndef exprtk_disable_string_capabilities
          inline expression_node_ptr synthesize_string_expression(const details::operator_type& opr, expression_node_ptr (&branch)[3])
          {
-            if (details::e_inrange != opr)
+            if (details::operator_type::e_inrange != opr)
                return error_node();
             else if ((0 == branch[0]) || (0 == branch[1]) || (0 == branch[2]))
             {
@@ -41479,9 +41475,9 @@ namespace exprtk
             {
                expression_node_ptr result = error_node();
 
-               if (details::e_eq == operation)
+               if (details::operator_type::e_eq == operation)
                   result = node_allocator_->allocate_c<literal_node_t>(T(1));
-               else if (details::e_ne == operation)
+               else if (details::operator_type::e_ne == operation)
                   result = node_allocator_->allocate_c<literal_node_t>(T(0));
 
                if (result)
@@ -41496,7 +41492,7 @@ namespace exprtk
 
                return branch[0];
             }
-            else if (details::e_eq == operation)
+            else if (details::operator_type::e_eq == operation)
             {
                expression_node_ptr result = node_allocator_->
                                                 allocate_rc<nulleq_node_t>(branch[b0_null ? 0 : 1],true);
@@ -41505,7 +41501,7 @@ namespace exprtk
 
                return result;
             }
-            else if (details::e_ne == operation)
+            else if (details::operator_type::e_ne == operation)
             {
                expression_node_ptr result = node_allocator_->
                                                 allocate_rc<nulleq_node_t>(branch[b0_null ? 0 : 1],false);
@@ -41527,9 +41523,9 @@ namespace exprtk
             }
 
             if (
-                 (details::e_add == operation) || (details::e_sub == operation) ||
-                 (details::e_mul == operation) || (details::e_div == operation) ||
-                 (details::e_mod == operation) || (details::e_pow == operation)
+                 (details::operator_type::e_add == operation) || (details::operator_type::e_sub == operation) ||
+                 (details::operator_type::e_mul == operation) || (details::operator_type::e_div == operation) ||
+                 (details::operator_type::e_mod == operation) || (details::operator_type::e_pow == operation)
                )
             {
                return branch[0];
@@ -41538,13 +41534,13 @@ namespace exprtk
             details::free_node(*node_allocator_, branch[0]);
 
             if (
-                 (details::e_lt    == operation) || (details::e_lte  == operation) ||
-                 (details::e_gt    == operation) || (details::e_gte  == operation) ||
-                 (details::e_and   == operation) || (details::e_nand == operation) ||
-                 (details::e_or    == operation) || (details::e_nor  == operation) ||
-                 (details::e_xor   == operation) || (details::e_xnor == operation) ||
-                 (details::e_in    == operation) || (details::e_like == operation) ||
-                 (details::e_ilike == operation)
+                 (details::operator_type::e_lt    == operation) || (details::operator_type::e_lte  == operation) ||
+                 (details::operator_type::e_gt    == operation) || (details::operator_type::e_gte  == operation) ||
+                 (details::operator_type::e_and   == operation) || (details::operator_type::e_nand == operation) ||
+                 (details::operator_type::e_or    == operation) || (details::operator_type::e_nor  == operation) ||
+                 (details::operator_type::e_xor   == operation) || (details::operator_type::e_xnor == operation) ||
+                 (details::operator_type::e_in    == operation) || (details::operator_type::e_like == operation) ||
+                 (details::operator_type::e_ilike == operation)
                )
             {
                return node_allocator_->allocate_c<literal_node_t>(T(0));
@@ -41557,9 +41553,9 @@ namespace exprtk
          inline expression_node_ptr synthesize_expression(const details::operator_type& operation, expression_node_ptr (&branch)[N])
          {
             if (
-                 (details::e_in    == operation) ||
-                 (details::e_like  == operation) ||
-                 (details::e_ilike == operation)
+                 (details::operator_type::e_in    == operation) ||
+                 (details::operator_type::e_like  == operation) ||
+                 (details::operator_type::e_ilike == operation)
                )
             {
                free_all_nodes(*node_allocator_,branch);
@@ -41572,7 +41568,7 @@ namespace exprtk
 
                return error_node();
             }
-            else if ((details::e_default != operation))
+            else if ((details::operator_type::e_default != operation))
             {
                // Attempt simple constant folding optimisation.
                expression_node_ptr expression_point = node_allocator_->allocate<NodeType>(operation,branch);
@@ -41746,45 +41742,45 @@ namespace exprtk
          #define register_unary_op(Op, UnaryFunctor)            \
          m.insert(std::make_pair(Op,UnaryFunctor<T>::process)); \
 
-         register_unary_op(details::e_abs   , details::abs_op  )
-         register_unary_op(details::e_acos  , details::acos_op )
-         register_unary_op(details::e_acosh , details::acosh_op)
-         register_unary_op(details::e_asin  , details::asin_op )
-         register_unary_op(details::e_asinh , details::asinh_op)
-         register_unary_op(details::e_atanh , details::atanh_op)
-         register_unary_op(details::e_ceil  , details::ceil_op )
-         register_unary_op(details::e_cos   , details::cos_op  )
-         register_unary_op(details::e_cosh  , details::cosh_op )
-         register_unary_op(details::e_exp   , details::exp_op  )
-         register_unary_op(details::e_expm1 , details::expm1_op)
-         register_unary_op(details::e_floor , details::floor_op)
-         register_unary_op(details::e_log   , details::log_op  )
-         register_unary_op(details::e_log10 , details::log10_op)
-         register_unary_op(details::e_log2  , details::log2_op )
-         register_unary_op(details::e_log1p , details::log1p_op)
-         register_unary_op(details::e_neg   , details::neg_op  )
-         register_unary_op(details::e_pos   , details::pos_op  )
-         register_unary_op(details::e_round , details::round_op)
-         register_unary_op(details::e_sin   , details::sin_op  )
-         register_unary_op(details::e_sinc  , details::sinc_op )
-         register_unary_op(details::e_sinh  , details::sinh_op )
-         register_unary_op(details::e_sqrt  , details::sqrt_op )
-         register_unary_op(details::e_tan   , details::tan_op  )
-         register_unary_op(details::e_tanh  , details::tanh_op )
-         register_unary_op(details::e_cot   , details::cot_op  )
-         register_unary_op(details::e_sec   , details::sec_op  )
-         register_unary_op(details::e_csc   , details::csc_op  )
-         register_unary_op(details::e_r2d   , details::r2d_op  )
-         register_unary_op(details::e_d2r   , details::d2r_op  )
-         register_unary_op(details::e_d2g   , details::d2g_op  )
-         register_unary_op(details::e_g2d   , details::g2d_op  )
-         register_unary_op(details::e_notl  , details::notl_op )
-         register_unary_op(details::e_sgn   , details::sgn_op  )
-         register_unary_op(details::e_erf   , details::erf_op  )
-         register_unary_op(details::e_erfc  , details::erfc_op )
-         register_unary_op(details::e_ncdf  , details::ncdf_op )
-         register_unary_op(details::e_frac  , details::frac_op )
-         register_unary_op(details::e_trunc , details::trunc_op)
+         register_unary_op(details::operator_type::e_abs   , details::abs_op  )
+         register_unary_op(details::operator_type::e_acos  , details::acos_op )
+         register_unary_op(details::operator_type::e_acosh , details::acosh_op)
+         register_unary_op(details::operator_type::e_asin  , details::asin_op )
+         register_unary_op(details::operator_type::e_asinh , details::asinh_op)
+         register_unary_op(details::operator_type::e_atanh , details::atanh_op)
+         register_unary_op(details::operator_type::e_ceil  , details::ceil_op )
+         register_unary_op(details::operator_type::e_cos   , details::cos_op  )
+         register_unary_op(details::operator_type::e_cosh  , details::cosh_op )
+         register_unary_op(details::operator_type::e_exp   , details::exp_op  )
+         register_unary_op(details::operator_type::e_expm1 , details::expm1_op)
+         register_unary_op(details::operator_type::e_floor , details::floor_op)
+         register_unary_op(details::operator_type::e_log   , details::log_op  )
+         register_unary_op(details::operator_type::e_log10 , details::log10_op)
+         register_unary_op(details::operator_type::e_log2  , details::log2_op )
+         register_unary_op(details::operator_type::e_log1p , details::log1p_op)
+         register_unary_op(details::operator_type::e_neg   , details::neg_op  )
+         register_unary_op(details::operator_type::e_pos   , details::pos_op  )
+         register_unary_op(details::operator_type::e_round , details::round_op)
+         register_unary_op(details::operator_type::e_sin   , details::sin_op  )
+         register_unary_op(details::operator_type::e_sinc  , details::sinc_op )
+         register_unary_op(details::operator_type::e_sinh  , details::sinh_op )
+         register_unary_op(details::operator_type::e_sqrt  , details::sqrt_op )
+         register_unary_op(details::operator_type::e_tan   , details::tan_op  )
+         register_unary_op(details::operator_type::e_tanh  , details::tanh_op )
+         register_unary_op(details::operator_type::e_cot   , details::cot_op  )
+         register_unary_op(details::operator_type::e_sec   , details::sec_op  )
+         register_unary_op(details::operator_type::e_csc   , details::csc_op  )
+         register_unary_op(details::operator_type::e_r2d   , details::r2d_op  )
+         register_unary_op(details::operator_type::e_d2r   , details::d2r_op  )
+         register_unary_op(details::operator_type::e_d2g   , details::d2g_op  )
+         register_unary_op(details::operator_type::e_g2d   , details::g2d_op  )
+         register_unary_op(details::operator_type::e_notl  , details::notl_op )
+         register_unary_op(details::operator_type::e_sgn   , details::sgn_op  )
+         register_unary_op(details::operator_type::e_erf   , details::erf_op  )
+         register_unary_op(details::operator_type::e_erfc  , details::erfc_op )
+         register_unary_op(details::operator_type::e_ncdf  , details::ncdf_op )
+         register_unary_op(details::operator_type::e_frac  , details::frac_op )
+         register_unary_op(details::operator_type::e_trunc , details::trunc_op)
          #undef register_unary_op
       }
 
@@ -41795,24 +41791,24 @@ namespace exprtk
          #define register_binary_op(Op, BinaryFunctor)       \
          m.insert(value_type(Op,BinaryFunctor<T>::process)); \
 
-         register_binary_op(details::e_add  , details::add_op )
-         register_binary_op(details::e_sub  , details::sub_op )
-         register_binary_op(details::e_mul  , details::mul_op )
-         register_binary_op(details::e_div  , details::div_op )
-         register_binary_op(details::e_mod  , details::mod_op )
-         register_binary_op(details::e_pow  , details::pow_op )
-         register_binary_op(details::e_lt   , details::lt_op  )
-         register_binary_op(details::e_lte  , details::lte_op )
-         register_binary_op(details::e_gt   , details::gt_op  )
-         register_binary_op(details::e_gte  , details::gte_op )
-         register_binary_op(details::e_eq   , details::eq_op  )
-         register_binary_op(details::e_ne   , details::ne_op  )
-         register_binary_op(details::e_and  , details::and_op )
-         register_binary_op(details::e_nand , details::nand_op)
-         register_binary_op(details::e_or   , details::or_op  )
-         register_binary_op(details::e_nor  , details::nor_op )
-         register_binary_op(details::e_xor  , details::xor_op )
-         register_binary_op(details::e_xnor , details::xnor_op)
+         register_binary_op(details::operator_type::e_add  , details::add_op )
+         register_binary_op(details::operator_type::e_sub  , details::sub_op )
+         register_binary_op(details::operator_type::e_mul  , details::mul_op )
+         register_binary_op(details::operator_type::e_div  , details::div_op )
+         register_binary_op(details::operator_type::e_mod  , details::mod_op )
+         register_binary_op(details::operator_type::e_pow  , details::pow_op )
+         register_binary_op(details::operator_type::e_lt   , details::lt_op  )
+         register_binary_op(details::operator_type::e_lte  , details::lte_op )
+         register_binary_op(details::operator_type::e_gt   , details::gt_op  )
+         register_binary_op(details::operator_type::e_gte  , details::gte_op )
+         register_binary_op(details::operator_type::e_eq   , details::eq_op  )
+         register_binary_op(details::operator_type::e_ne   , details::ne_op  )
+         register_binary_op(details::operator_type::e_and  , details::and_op )
+         register_binary_op(details::operator_type::e_nand , details::nand_op)
+         register_binary_op(details::operator_type::e_or   , details::or_op  )
+         register_binary_op(details::operator_type::e_nor  , details::nor_op )
+         register_binary_op(details::operator_type::e_xor  , details::xor_op )
+         register_binary_op(details::operator_type::e_xnor , details::xnor_op)
          #undef register_binary_op
       }
 
@@ -41823,24 +41819,24 @@ namespace exprtk
          #define register_binary_op(Op, BinaryFunctor)       \
          m.insert(value_type(BinaryFunctor<T>::process,Op)); \
 
-         register_binary_op(details::e_add  , details::add_op )
-         register_binary_op(details::e_sub  , details::sub_op )
-         register_binary_op(details::e_mul  , details::mul_op )
-         register_binary_op(details::e_div  , details::div_op )
-         register_binary_op(details::e_mod  , details::mod_op )
-         register_binary_op(details::e_pow  , details::pow_op )
-         register_binary_op(details::e_lt   , details::lt_op  )
-         register_binary_op(details::e_lte  , details::lte_op )
-         register_binary_op(details::e_gt   , details::gt_op  )
-         register_binary_op(details::e_gte  , details::gte_op )
-         register_binary_op(details::e_eq   , details::eq_op  )
-         register_binary_op(details::e_ne   , details::ne_op  )
-         register_binary_op(details::e_and  , details::and_op )
-         register_binary_op(details::e_nand , details::nand_op)
-         register_binary_op(details::e_or   , details::or_op  )
-         register_binary_op(details::e_nor  , details::nor_op )
-         register_binary_op(details::e_xor  , details::xor_op )
-         register_binary_op(details::e_xnor , details::xnor_op)
+         register_binary_op(details::operator_type::e_add  , details::add_op )
+         register_binary_op(details::operator_type::e_sub  , details::sub_op )
+         register_binary_op(details::operator_type::e_mul  , details::mul_op )
+         register_binary_op(details::operator_type::e_div  , details::div_op )
+         register_binary_op(details::operator_type::e_mod  , details::mod_op )
+         register_binary_op(details::operator_type::e_pow  , details::pow_op )
+         register_binary_op(details::operator_type::e_lt   , details::lt_op  )
+         register_binary_op(details::operator_type::e_lte  , details::lte_op )
+         register_binary_op(details::operator_type::e_gt   , details::gt_op  )
+         register_binary_op(details::operator_type::e_gte  , details::gte_op )
+         register_binary_op(details::operator_type::e_eq   , details::eq_op  )
+         register_binary_op(details::operator_type::e_ne   , details::ne_op  )
+         register_binary_op(details::operator_type::e_and  , details::and_op )
+         register_binary_op(details::operator_type::e_nand , details::nand_op)
+         register_binary_op(details::operator_type::e_or   , details::or_op  )
+         register_binary_op(details::operator_type::e_nor  , details::nor_op )
+         register_binary_op(details::operator_type::e_xor  , details::xor_op )
+         register_binary_op(details::operator_type::e_xnor , details::xnor_op)
          #undef register_binary_op
       }
 
@@ -41849,7 +41845,7 @@ namespace exprtk
          typedef std::pair<trinary_functor_t,details::operator_type> pair_t;
 
          #define register_sf3(Op)                                                                             \
-         sf3_map[details::sf##Op##_op<T>::id()] = pair_t(details::sf##Op##_op<T>::process,details::e_sf##Op); \
+         sf3_map[details::sf##Op##_op<T>::id()] = pair_t(details::sf##Op##_op<T>::process,details::operator_type::e_sf##Op); \
 
          register_sf3(00) register_sf3(01) register_sf3(02) register_sf3(03)
          register_sf3(04) register_sf3(05) register_sf3(06) register_sf3(07)
@@ -41862,7 +41858,7 @@ namespace exprtk
          #undef register_sf3
 
          #define register_sf3_extid(Id, Op)                                        \
-         sf3_map[Id] = pair_t(details::sf##Op##_op<T>::process,details::e_sf##Op); \
+         sf3_map[Id] = pair_t(details::sf##Op##_op<T>::process,details::operator_type::e_sf##Op); \
 
          register_sf3_extid("(t-t)-t",23)  // (t-t)-t --> t-(t+t)
          #undef register_sf3_extid
@@ -41873,7 +41869,7 @@ namespace exprtk
          typedef std::pair<quaternary_functor_t,details::operator_type> pair_t;
 
          #define register_sf4(Op)                                                                             \
-         sf4_map[details::sf##Op##_op<T>::id()] = pair_t(details::sf##Op##_op<T>::process,details::e_sf##Op); \
+         sf4_map[details::sf##Op##_op<T>::id()] = pair_t(details::sf##Op##_op<T>::process,details::operator_type::e_sf##Op); \
 
          register_sf4(48) register_sf4(49) register_sf4(50) register_sf4(51)
          register_sf4(52) register_sf4(53) register_sf4(54) register_sf4(55)
@@ -41887,7 +41883,7 @@ namespace exprtk
          #undef register_sf4
 
          #define register_sf4ext(Op)                                                                                    \
-         sf4_map[details::sfext##Op##_op<T>::id()] = pair_t(details::sfext##Op##_op<T>::process,details::e_sf4ext##Op); \
+         sf4_map[details::sfext##Op##_op<T>::id()] = pair_t(details::sfext##Op##_op<T>::process,details::operator_type::e_sf4ext##Op); \
 
          register_sf4ext(00) register_sf4ext(01) register_sf4ext(02) register_sf4ext(03)
          register_sf4ext(04) register_sf4ext(05) register_sf4ext(06) register_sf4ext(07)
